/*
 * generated by Xtext 2.12.0
 */
package org.eclipse.emf.parsley.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.parsley.dsl.model.Backgrounds;
import org.eclipse.emf.parsley.dsl.model.BindingsSpecification;
import org.eclipse.emf.parsley.dsl.model.Configurator;
import org.eclipse.emf.parsley.dsl.model.ConfiguratorEClass;
import org.eclipse.emf.parsley.dsl.model.ConfiguratorResourceURI;
import org.eclipse.emf.parsley.dsl.model.ContentProviderChildren;
import org.eclipse.emf.parsley.dsl.model.ContentProviderElements;
import org.eclipse.emf.parsley.dsl.model.ControlFactorySpecification;
import org.eclipse.emf.parsley.dsl.model.ControlFactorySpecifications;
import org.eclipse.emf.parsley.dsl.model.DialogControlFactory;
import org.eclipse.emf.parsley.dsl.model.DialogFeatureCaptionProvider;
import org.eclipse.emf.parsley.dsl.model.EmfMenus;
import org.eclipse.emf.parsley.dsl.model.ExtendsClause;
import org.eclipse.emf.parsley.dsl.model.FeatureAssociatedExpression;
import org.eclipse.emf.parsley.dsl.model.FeatureBackgrounds;
import org.eclipse.emf.parsley.dsl.model.FeatureCaptionProvider;
import org.eclipse.emf.parsley.dsl.model.FeatureFonts;
import org.eclipse.emf.parsley.dsl.model.FeatureForegrounds;
import org.eclipse.emf.parsley.dsl.model.FeatureImages;
import org.eclipse.emf.parsley.dsl.model.FeatureLabels;
import org.eclipse.emf.parsley.dsl.model.FeatureSpecification;
import org.eclipse.emf.parsley.dsl.model.FeatureSpecifications;
import org.eclipse.emf.parsley.dsl.model.FeatureTexts;
import org.eclipse.emf.parsley.dsl.model.FeaturesProvider;
import org.eclipse.emf.parsley.dsl.model.FieldSpecification;
import org.eclipse.emf.parsley.dsl.model.Fonts;
import org.eclipse.emf.parsley.dsl.model.Foregrounds;
import org.eclipse.emf.parsley.dsl.model.FormControlFactory;
import org.eclipse.emf.parsley.dsl.model.FormFeatureCaptionProvider;
import org.eclipse.emf.parsley.dsl.model.Images;
import org.eclipse.emf.parsley.dsl.model.LabelProvider;
import org.eclipse.emf.parsley.dsl.model.MenuBuilder;
import org.eclipse.emf.parsley.dsl.model.Menus;
import org.eclipse.emf.parsley.dsl.model.Model;
import org.eclipse.emf.parsley.dsl.model.ModelPackage;
import org.eclipse.emf.parsley.dsl.model.Module;
import org.eclipse.emf.parsley.dsl.model.PartsSpecifications;
import org.eclipse.emf.parsley.dsl.model.PolymorphicSpecification;
import org.eclipse.emf.parsley.dsl.model.ProposalCreator;
import org.eclipse.emf.parsley.dsl.model.ProviderBinding;
import org.eclipse.emf.parsley.dsl.model.ResourceManager;
import org.eclipse.emf.parsley.dsl.model.RowBackgrounds;
import org.eclipse.emf.parsley.dsl.model.RowFonts;
import org.eclipse.emf.parsley.dsl.model.RowForegrounds;
import org.eclipse.emf.parsley.dsl.model.SimpleMethodSpecification;
import org.eclipse.emf.parsley.dsl.model.TableFeaturesProvider;
import org.eclipse.emf.parsley.dsl.model.TableLabelProvider;
import org.eclipse.emf.parsley.dsl.model.TableViewerContentProvider;
import org.eclipse.emf.parsley.dsl.model.Texts;
import org.eclipse.emf.parsley.dsl.model.TypeBinding;
import org.eclipse.emf.parsley.dsl.model.ValueBinding;
import org.eclipse.emf.parsley.dsl.model.ViewSpecification;
import org.eclipse.emf.parsley.dsl.model.ViewerContentProvider;
import org.eclipse.emf.parsley.dsl.services.EmfParsleyDslGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.annotations.serializer.XbaseWithAnnotationsSemanticSequencer;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationElementValuePair;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationsPackage;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class EmfParsleyDslSemanticSequencer extends XbaseWithAnnotationsSemanticSequencer {

	@Inject
	private EmfParsleyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.BACKGROUNDS:
				sequence_Backgrounds(context, (Backgrounds) semanticObject); 
				return; 
			case ModelPackage.BINDINGS_SPECIFICATION:
				sequence_BindingsSpecification(context, (BindingsSpecification) semanticObject); 
				return; 
			case ModelPackage.CONFIGURATOR:
				sequence_Configurator(context, (Configurator) semanticObject); 
				return; 
			case ModelPackage.CONFIGURATOR_ECLASS:
				sequence_ConfiguratorEClass(context, (ConfiguratorEClass) semanticObject); 
				return; 
			case ModelPackage.CONFIGURATOR_RESOURCE_URI:
				sequence_ConfiguratorResourceURI(context, (ConfiguratorResourceURI) semanticObject); 
				return; 
			case ModelPackage.CONTENT_PROVIDER_CHILDREN:
				sequence_ContentProviderChildren(context, (ContentProviderChildren) semanticObject); 
				return; 
			case ModelPackage.CONTENT_PROVIDER_ELEMENTS:
				sequence_ContentProviderElements(context, (ContentProviderElements) semanticObject); 
				return; 
			case ModelPackage.CONTROL_FACTORY_SPECIFICATION:
				sequence_ControlFactorySpecification(context, (ControlFactorySpecification) semanticObject); 
				return; 
			case ModelPackage.CONTROL_FACTORY_SPECIFICATIONS:
				sequence_ControlFactorySpecifications(context, (ControlFactorySpecifications) semanticObject); 
				return; 
			case ModelPackage.DIALOG_CONTROL_FACTORY:
				sequence_DialogControlFactory(context, (DialogControlFactory) semanticObject); 
				return; 
			case ModelPackage.DIALOG_FEATURE_CAPTION_PROVIDER:
				sequence_DialogFeatureCaptionProvider(context, (DialogFeatureCaptionProvider) semanticObject); 
				return; 
			case ModelPackage.EMF_MENUS:
				sequence_EmfMenus(context, (EmfMenus) semanticObject); 
				return; 
			case ModelPackage.EXTENDS_CLAUSE:
				sequence_ExtendsClause(context, (ExtendsClause) semanticObject); 
				return; 
			case ModelPackage.FEATURE_ASSOCIATED_EXPRESSION:
				sequence_FeatureAssociatedExpression(context, (FeatureAssociatedExpression) semanticObject); 
				return; 
			case ModelPackage.FEATURE_BACKGROUNDS:
				sequence_FeatureBackgrounds(context, (FeatureBackgrounds) semanticObject); 
				return; 
			case ModelPackage.FEATURE_CAPTION_PROVIDER:
				sequence_FeatureCaptionProvider(context, (FeatureCaptionProvider) semanticObject); 
				return; 
			case ModelPackage.FEATURE_FONTS:
				sequence_FeatureFonts(context, (FeatureFonts) semanticObject); 
				return; 
			case ModelPackage.FEATURE_FOREGROUNDS:
				sequence_FeatureForegrounds(context, (FeatureForegrounds) semanticObject); 
				return; 
			case ModelPackage.FEATURE_IMAGES:
				sequence_FeatureImages(context, (FeatureImages) semanticObject); 
				return; 
			case ModelPackage.FEATURE_LABELS:
				sequence_FeatureLabels(context, (FeatureLabels) semanticObject); 
				return; 
			case ModelPackage.FEATURE_SPECIFICATION:
				sequence_FeatureSpecification(context, (FeatureSpecification) semanticObject); 
				return; 
			case ModelPackage.FEATURE_SPECIFICATIONS:
				sequence_FeatureSpecifications(context, (FeatureSpecifications) semanticObject); 
				return; 
			case ModelPackage.FEATURE_TEXTS:
				sequence_FeatureTexts(context, (FeatureTexts) semanticObject); 
				return; 
			case ModelPackage.FEATURES_PROVIDER:
				sequence_FeaturesProvider(context, (FeaturesProvider) semanticObject); 
				return; 
			case ModelPackage.FIELD_SPECIFICATION:
				sequence_FieldSpecification(context, (FieldSpecification) semanticObject); 
				return; 
			case ModelPackage.FONTS:
				sequence_Fonts(context, (Fonts) semanticObject); 
				return; 
			case ModelPackage.FOREGROUNDS:
				sequence_Foregrounds(context, (Foregrounds) semanticObject); 
				return; 
			case ModelPackage.FORM_CONTROL_FACTORY:
				sequence_FormControlFactory(context, (FormControlFactory) semanticObject); 
				return; 
			case ModelPackage.FORM_FEATURE_CAPTION_PROVIDER:
				sequence_FormFeatureCaptionProvider(context, (FormFeatureCaptionProvider) semanticObject); 
				return; 
			case ModelPackage.IMAGES:
				sequence_Images(context, (Images) semanticObject); 
				return; 
			case ModelPackage.LABEL_PROVIDER:
				sequence_LabelProvider(context, (LabelProvider) semanticObject); 
				return; 
			case ModelPackage.MENU_BUILDER:
				sequence_MenuBuilder(context, (MenuBuilder) semanticObject); 
				return; 
			case ModelPackage.MENUS:
				sequence_Menus(context, (Menus) semanticObject); 
				return; 
			case ModelPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ModelPackage.MODULE:
				sequence_Module(context, (Module) semanticObject); 
				return; 
			case ModelPackage.PARTS_SPECIFICATIONS:
				sequence_PartsSpecifications(context, (PartsSpecifications) semanticObject); 
				return; 
			case ModelPackage.POLYMORPHIC_SPECIFICATION:
				sequence_PolymorphicSpecification(context, (PolymorphicSpecification) semanticObject); 
				return; 
			case ModelPackage.PROPOSAL_CREATOR:
				sequence_ProposalCreator(context, (ProposalCreator) semanticObject); 
				return; 
			case ModelPackage.PROVIDER_BINDING:
				sequence_Binding(context, (ProviderBinding) semanticObject); 
				return; 
			case ModelPackage.RESOURCE_MANAGER:
				sequence_ResourceManager(context, (ResourceManager) semanticObject); 
				return; 
			case ModelPackage.ROW_BACKGROUNDS:
				sequence_RowBackgrounds(context, (RowBackgrounds) semanticObject); 
				return; 
			case ModelPackage.ROW_FONTS:
				sequence_RowFonts(context, (RowFonts) semanticObject); 
				return; 
			case ModelPackage.ROW_FOREGROUNDS:
				sequence_RowForegrounds(context, (RowForegrounds) semanticObject); 
				return; 
			case ModelPackage.SIMPLE_METHOD_SPECIFICATION:
				sequence_SimpleMethodSpecification(context, (SimpleMethodSpecification) semanticObject); 
				return; 
			case ModelPackage.TABLE_FEATURES_PROVIDER:
				sequence_TableFeaturesProvider(context, (TableFeaturesProvider) semanticObject); 
				return; 
			case ModelPackage.TABLE_LABEL_PROVIDER:
				sequence_TableLabelProvider(context, (TableLabelProvider) semanticObject); 
				return; 
			case ModelPackage.TABLE_VIEWER_CONTENT_PROVIDER:
				sequence_TableViewerContentProvider(context, (TableViewerContentProvider) semanticObject); 
				return; 
			case ModelPackage.TEXTS:
				sequence_Texts(context, (Texts) semanticObject); 
				return; 
			case ModelPackage.TYPE_BINDING:
				sequence_Binding(context, (TypeBinding) semanticObject); 
				return; 
			case ModelPackage.VALUE_BINDING:
				sequence_Binding(context, (ValueBinding) semanticObject); 
				return; 
			case ModelPackage.VIEW_SPECIFICATION:
				sequence_ViewSpecification(context, (ViewSpecification) semanticObject); 
				return; 
			case ModelPackage.VIEWER_CONTENT_PROVIDER:
				sequence_ViewerContentProvider(context, (ViewerContentProvider) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XAnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XAnnotationsPackage.XANNOTATION:
				sequence_XAnnotation(context, (XAnnotation) semanticObject); 
				return; 
			case XAnnotationsPackage.XANNOTATION_ELEMENT_VALUE_PAIR:
				sequence_XAnnotationElementValuePair(context, (XAnnotationElementValuePair) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()
						|| action == grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0()
						|| rule == grammarAccess.getXAnnotationElementValueRule()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()
						|| action == grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0()
						|| rule == grammarAccess.getXAnnotationElementValueRule()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				if (rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()) {
					sequence_XAnnotationElementValueOrCommaList_XListLiteral(context, (XListLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXAnnotationElementValueRule()) {
					sequence_XAnnotationElementValue_XListLiteral(context, (XListLiteral) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXCollectionLiteralRule()
						|| rule == grammarAccess.getXListLiteralRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XListLiteral(context, (XListLiteral) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Backgrounds returns Backgrounds
	 *     WithExpressions returns Backgrounds
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_Backgrounds(ISerializationContext context, Backgrounds semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Binding returns ProviderBinding
	 *
	 * Constraint:
	 *     (type=JvmTypeReference to=XExpression)
	 */
	protected void sequence_Binding(ISerializationContext context, ProviderBinding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.PROVIDER_BINDING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.PROVIDER_BINDING__TYPE));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.BINDING__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.BINDING__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBindingAccess().getTypeJvmTypeReferenceParserRuleCall_1_2_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getBindingAccess().getToXExpressionParserRuleCall_1_4_0(), semanticObject.getTo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Binding returns TypeBinding
	 *
	 * Constraint:
	 *     (typeToBind=JvmTypeReference to=XExpression)
	 */
	protected void sequence_Binding(ISerializationContext context, TypeBinding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.TYPE_BINDING__TYPE_TO_BIND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.TYPE_BINDING__TYPE_TO_BIND));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.BINDING__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.BINDING__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBindingAccess().getTypeToBindJvmTypeReferenceParserRuleCall_0_2_0(), semanticObject.getTypeToBind());
		feeder.accept(grammarAccess.getBindingAccess().getToXExpressionParserRuleCall_0_4_0(), semanticObject.getTo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Binding returns ValueBinding
	 *
	 * Constraint:
	 *     (typeDecl=JvmTypeReference id=ValidID to=XExpression)
	 */
	protected void sequence_Binding(ISerializationContext context, ValueBinding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.VALUE_BINDING__TYPE_DECL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.VALUE_BINDING__TYPE_DECL));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.VALUE_BINDING__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.VALUE_BINDING__ID));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.BINDING__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.BINDING__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBindingAccess().getTypeDeclJvmTypeReferenceParserRuleCall_2_2_0(), semanticObject.getTypeDecl());
		feeder.accept(grammarAccess.getBindingAccess().getIdValidIDParserRuleCall_2_3_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getBindingAccess().getToXExpressionParserRuleCall_2_5_0(), semanticObject.getTo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BindingsSpecification returns BindingsSpecification
	 *
	 * Constraint:
	 *     bindings+=Binding*
	 */
	protected void sequence_BindingsSpecification(ISerializationContext context, BindingsSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WithExpressions returns ConfiguratorEClass
	 *     ConfiguratorEClass returns ConfiguratorEClass
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_ConfiguratorEClass(ISerializationContext context, ConfiguratorEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WithExpressions returns ConfiguratorResourceURI
	 *     ConfiguratorResourceURI returns ConfiguratorResourceURI
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_ConfiguratorResourceURI(ISerializationContext context, ConfiguratorResourceURI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Configurator returns Configurator
	 *     WithExtendsClause returns Configurator
	 *     WithFields returns Configurator
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* (resourceURI=ConfiguratorResourceURI | eClassSpec=ConfiguratorEClass)*)
	 */
	protected void sequence_Configurator(ISerializationContext context, Configurator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WithExpressions returns ContentProviderChildren
	 *     ContentProviderChildren returns ContentProviderChildren
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_ContentProviderChildren(ISerializationContext context, ContentProviderChildren semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WithExpressions returns ContentProviderElements
	 *     ContentProviderElements returns ContentProviderElements
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_ContentProviderElements(ISerializationContext context, ContentProviderElements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ControlFactorySpecification returns ControlFactorySpecification
	 *     EmfFeatureAccess returns ControlFactorySpecification
	 *
	 * Constraint:
	 *     (parameterType=JvmTypeReference feature=[JvmMember|ID] expression=XExpression target=XExpression?)
	 */
	protected void sequence_ControlFactorySpecification(ISerializationContext context, ControlFactorySpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ControlFactorySpecifications returns ControlFactorySpecifications
	 *
	 * Constraint:
	 *     specifications+=ControlFactorySpecification*
	 */
	protected void sequence_ControlFactorySpecifications(ISerializationContext context, ControlFactorySpecifications semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DialogControlFactory returns DialogControlFactory
	 *     AbstractControlFactory returns DialogControlFactory
	 *     WithExtendsClause returns DialogControlFactory
	 *     WithFields returns DialogControlFactory
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* controls=ControlFactorySpecifications?)
	 */
	protected void sequence_DialogControlFactory(ISerializationContext context, DialogControlFactory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DialogFeatureCaptionProvider returns DialogFeatureCaptionProvider
	 *     AbstractFeatureCaptionProviderWithLabel returns DialogFeatureCaptionProvider
	 *     WithExtendsClause returns DialogFeatureCaptionProvider
	 *     WithFields returns DialogFeatureCaptionProvider
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* (featureTexts=FeatureTexts | featureLabels=FeatureLabels)*)
	 */
	protected void sequence_DialogFeatureCaptionProvider(ISerializationContext context, DialogFeatureCaptionProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WithExpressions returns EmfMenus
	 *     EmfMenus returns EmfMenus
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_EmfMenus(ISerializationContext context, EmfMenus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExtendsClause returns ExtendsClause
	 *
	 * Constraint:
	 *     superType=JvmTypeReference
	 */
	protected void sequence_ExtendsClause(ISerializationContext context, ExtendsClause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.EXTENDS_CLAUSE__SUPER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.EXTENDS_CLAUSE__SUPER_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExtendsClauseAccess().getSuperTypeJvmTypeReferenceParserRuleCall_1_0(), semanticObject.getSuperType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureAssociatedExpression returns FeatureAssociatedExpression
	 *     EmfFeatureAccess returns FeatureAssociatedExpression
	 *
	 * Constraint:
	 *     (parameterType=JvmTypeReference feature=[JvmMember|ID] expression=XExpression)
	 */
	protected void sequence_FeatureAssociatedExpression(ISerializationContext context, FeatureAssociatedExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.EMF_FEATURE_ACCESS__PARAMETER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.EMF_FEATURE_ACCESS__PARAMETER_TYPE));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.FEATURE_ASSOCIATED_EXPRESSION__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.FEATURE_ASSOCIATED_EXPRESSION__FEATURE));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.FEATURE_ASSOCIATED_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.FEATURE_ASSOCIATED_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureAssociatedExpressionAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0(), semanticObject.getParameterType());
		feeder.accept(grammarAccess.getFeatureAssociatedExpressionAccess().getFeatureJvmMemberIDTerminalRuleCall_2_0_1(), semanticObject.eGet(ModelPackage.Literals.FEATURE_ASSOCIATED_EXPRESSION__FEATURE, false));
		feeder.accept(grammarAccess.getFeatureAssociatedExpressionAccess().getExpressionXExpressionParserRuleCall_4_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureBackgrounds returns FeatureBackgrounds
	 *     WithFeatureAssociatedExpressions returns FeatureBackgrounds
	 *
	 * Constraint:
	 *     specifications+=FeatureAssociatedExpression*
	 */
	protected void sequence_FeatureBackgrounds(ISerializationContext context, FeatureBackgrounds semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureCaptionProvider returns FeatureCaptionProvider
	 *     WithExtendsClause returns FeatureCaptionProvider
	 *     WithFields returns FeatureCaptionProvider
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* featureTexts=FeatureTexts?)
	 */
	protected void sequence_FeatureCaptionProvider(ISerializationContext context, FeatureCaptionProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureFonts returns FeatureFonts
	 *     WithFeatureAssociatedExpressions returns FeatureFonts
	 *
	 * Constraint:
	 *     specifications+=FeatureAssociatedExpression*
	 */
	protected void sequence_FeatureFonts(ISerializationContext context, FeatureFonts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureForegrounds returns FeatureForegrounds
	 *     WithFeatureAssociatedExpressions returns FeatureForegrounds
	 *
	 * Constraint:
	 *     specifications+=FeatureAssociatedExpression*
	 */
	protected void sequence_FeatureForegrounds(ISerializationContext context, FeatureForegrounds semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureImages returns FeatureImages
	 *     WithFeatureAssociatedExpressions returns FeatureImages
	 *
	 * Constraint:
	 *     specifications+=FeatureAssociatedExpression*
	 */
	protected void sequence_FeatureImages(ISerializationContext context, FeatureImages semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureLabels returns FeatureLabels
	 *     WithFeatureAssociatedExpressions returns FeatureLabels
	 *
	 * Constraint:
	 *     specifications+=FeatureAssociatedExpression*
	 */
	protected void sequence_FeatureLabels(ISerializationContext context, FeatureLabels semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureSpecification returns FeatureSpecification
	 *     EmfFeatureAccess returns FeatureSpecification
	 *
	 * Constraint:
	 *     (parameterType=JvmTypeReference features+=[JvmMember|ID] features+=[JvmMember|ID]*)
	 */
	protected void sequence_FeatureSpecification(ISerializationContext context, FeatureSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureSpecifications returns FeatureSpecifications
	 *
	 * Constraint:
	 *     featureSpecifications+=FeatureSpecification*
	 */
	protected void sequence_FeatureSpecifications(ISerializationContext context, FeatureSpecifications semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeatureTexts returns FeatureTexts
	 *     WithFeatureAssociatedExpressions returns FeatureTexts
	 *
	 * Constraint:
	 *     specifications+=FeatureAssociatedExpression*
	 */
	protected void sequence_FeatureTexts(ISerializationContext context, FeatureTexts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FeaturesProvider returns FeaturesProvider
	 *     AbstractFeatureProvider returns FeaturesProvider
	 *     WithExtendsClause returns FeaturesProvider
	 *     WithFields returns FeaturesProvider
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* features=FeatureSpecifications?)
	 */
	protected void sequence_FeaturesProvider(ISerializationContext context, FeaturesProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldSpecification returns FieldSpecification
	 *
	 * Constraint:
	 *     (
	 *         annotations+=XAnnotation* 
	 *         writeable?='var'? 
	 *         ((extension?='extension' type=JvmTypeReference) | type=JvmTypeReference)? 
	 *         name=ValidID 
	 *         right=XExpression?
	 *     )
	 */
	protected void sequence_FieldSpecification(ISerializationContext context, FieldSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Fonts returns Fonts
	 *     WithExpressions returns Fonts
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_Fonts(ISerializationContext context, Fonts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Foregrounds returns Foregrounds
	 *     WithExpressions returns Foregrounds
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_Foregrounds(ISerializationContext context, Foregrounds semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormControlFactory returns FormControlFactory
	 *     AbstractControlFactory returns FormControlFactory
	 *     WithExtendsClause returns FormControlFactory
	 *     WithFields returns FormControlFactory
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* controls=ControlFactorySpecifications?)
	 */
	protected void sequence_FormControlFactory(ISerializationContext context, FormControlFactory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormFeatureCaptionProvider returns FormFeatureCaptionProvider
	 *     AbstractFeatureCaptionProviderWithLabel returns FormFeatureCaptionProvider
	 *     WithExtendsClause returns FormFeatureCaptionProvider
	 *     WithFields returns FormFeatureCaptionProvider
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* (featureTexts=FeatureTexts | featureLabels=FeatureLabels)*)
	 */
	protected void sequence_FormFeatureCaptionProvider(ISerializationContext context, FormFeatureCaptionProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Images returns Images
	 *     WithExpressions returns Images
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_Images(ISerializationContext context, Images semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LabelProvider returns LabelProvider
	 *     WithExtendsClause returns LabelProvider
	 *     WithFields returns LabelProvider
	 *
	 * Constraint:
	 *     (
	 *         extendsClause=ExtendsClause? 
	 *         fields+=FieldSpecification* 
	 *         (texts=Texts | images=Images | fonts=Fonts | foregrounds=Foregrounds | backgrounds=Backgrounds)*
	 *     )
	 */
	protected void sequence_LabelProvider(ISerializationContext context, LabelProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MenuBuilder returns MenuBuilder
	 *     WithExtendsClause returns MenuBuilder
	 *     WithFields returns MenuBuilder
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* (menus=Menus | emfMenus=EmfMenus)*)
	 */
	protected void sequence_MenuBuilder(ISerializationContext context, MenuBuilder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WithExpressions returns Menus
	 *     Menus returns Menus
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_Menus(ISerializationContext context, Menus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (importSection=XImportSection? module=Module)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Module returns Module
	 *     WithExtendsClause returns Module
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         extendsClause=ExtendsClause? 
	 *         (
	 *             bindingsSpecification=BindingsSpecification | 
	 *             labelProvider=LabelProvider | 
	 *             tableLabelProvider=TableLabelProvider | 
	 *             featureCaptionProvider=FeatureCaptionProvider | 
	 *             formFeatureCaptionProvider=FormFeatureCaptionProvider | 
	 *             dialogFeatureCaptionProvider=DialogFeatureCaptionProvider | 
	 *             featuresProvider=FeaturesProvider | 
	 *             tableFeaturesProvider=TableFeaturesProvider | 
	 *             formControlFactory=FormControlFactory | 
	 *             dialogControlFactory=DialogControlFactory | 
	 *             proposalCreator=ProposalCreator | 
	 *             menuBuilder=MenuBuilder | 
	 *             configurator=Configurator | 
	 *             viewerContentProvider=ViewerContentProvider | 
	 *             tableViewerContentProvider=TableViewerContentProvider | 
	 *             partsSpecifications=PartsSpecifications | 
	 *             resourceManager=ResourceManager
	 *         )*
	 *     )
	 */
	protected void sequence_Module(ISerializationContext context, Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PartsSpecifications returns PartsSpecifications
	 *
	 * Constraint:
	 *     parts+=PartSpecification*
	 */
	protected void sequence_PartsSpecifications(ISerializationContext context, PartsSpecifications semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PolymorphicSpecification returns PolymorphicSpecification
	 *
	 * Constraint:
	 *     (parameterType=JvmTypeReference name=ValidID? expression=XExpression)
	 */
	protected void sequence_PolymorphicSpecification(ISerializationContext context, PolymorphicSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProposalCreator returns ProposalCreator
	 *     WithExtendsClause returns ProposalCreator
	 *     WithFields returns ProposalCreator
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* proposalsSpecifications+=FeatureAssociatedExpression*)
	 */
	protected void sequence_ProposalCreator(ISerializationContext context, ProposalCreator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResourceManager returns ResourceManager
	 *     WithExtendsClause returns ResourceManager
	 *     WithFields returns ResourceManager
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* (initializeBody=SimpleMethodSpecification | saveBody=SimpleMethodSpecification)*)
	 */
	protected void sequence_ResourceManager(ISerializationContext context, ResourceManager semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RowBackgrounds returns RowBackgrounds
	 *     WithExpressions returns RowBackgrounds
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_RowBackgrounds(ISerializationContext context, RowBackgrounds semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RowFonts returns RowFonts
	 *     WithExpressions returns RowFonts
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_RowFonts(ISerializationContext context, RowFonts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RowForegrounds returns RowForegrounds
	 *     WithExpressions returns RowForegrounds
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_RowForegrounds(ISerializationContext context, RowForegrounds semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleMethodSpecification returns SimpleMethodSpecification
	 *
	 * Constraint:
	 *     body=XBlockExpression
	 */
	protected void sequence_SimpleMethodSpecification(ISerializationContext context, SimpleMethodSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.SIMPLE_METHOD_SPECIFICATION__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.SIMPLE_METHOD_SPECIFICATION__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleMethodSpecificationAccess().getBodyXBlockExpressionParserRuleCall_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TableFeaturesProvider returns TableFeaturesProvider
	 *     AbstractFeatureProvider returns TableFeaturesProvider
	 *     WithExtendsClause returns TableFeaturesProvider
	 *     WithFields returns TableFeaturesProvider
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* features=FeatureSpecifications?)
	 */
	protected void sequence_TableFeaturesProvider(ISerializationContext context, TableFeaturesProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableLabelProvider returns TableLabelProvider
	 *     WithExtendsClause returns TableLabelProvider
	 *     WithFields returns TableLabelProvider
	 *
	 * Constraint:
	 *     (
	 *         extendsClause=ExtendsClause? 
	 *         fields+=FieldSpecification* 
	 *         (
	 *             featureTexts=FeatureTexts | 
	 *             featureImages=FeatureImages | 
	 *             featureFonts=FeatureFonts | 
	 *             featureForegrounds=FeatureForegrounds | 
	 *             featureBackgrounds=FeatureBackgrounds | 
	 *             rowFonts=RowFonts | 
	 *             rowForegrounds=RowForegrounds | 
	 *             rowBackgrounds=RowBackgrounds
	 *         )*
	 *     )
	 */
	protected void sequence_TableLabelProvider(ISerializationContext context, TableLabelProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableViewerContentProvider returns TableViewerContentProvider
	 *     WithExtendsClause returns TableViewerContentProvider
	 *     WithFields returns TableViewerContentProvider
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* elements=ContentProviderElements?)
	 */
	protected void sequence_TableViewerContentProvider(ISerializationContext context, TableViewerContentProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Texts returns Texts
	 *     WithExpressions returns Texts
	 *
	 * Constraint:
	 *     specifications+=PolymorphicSpecification*
	 */
	protected void sequence_Texts(ISerializationContext context, Texts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PartSpecification returns ViewSpecification
	 *     ViewSpecification returns ViewSpecification
	 *
	 * Constraint:
	 *     (id=QualifiedName viewName=STRING type=JvmTypeReference category=QualifiedName?)
	 */
	protected void sequence_ViewSpecification(ISerializationContext context, ViewSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ViewerContentProvider returns ViewerContentProvider
	 *     WithExtendsClause returns ViewerContentProvider
	 *     WithFields returns ViewerContentProvider
	 *
	 * Constraint:
	 *     (extendsClause=ExtendsClause? fields+=FieldSpecification* (elements=ContentProviderElements | children=ContentProviderChildren)*)
	 */
	protected void sequence_ViewerContentProvider(ISerializationContext context, ViewerContentProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
