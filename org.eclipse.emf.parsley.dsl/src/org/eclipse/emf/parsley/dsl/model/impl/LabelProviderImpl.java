/**
 * generated by Xtext 2.12.0
 */
package org.eclipse.emf.parsley.dsl.model.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.parsley.dsl.model.Backgrounds;
import org.eclipse.emf.parsley.dsl.model.Fonts;
import org.eclipse.emf.parsley.dsl.model.Foregrounds;
import org.eclipse.emf.parsley.dsl.model.Images;
import org.eclipse.emf.parsley.dsl.model.LabelProvider;
import org.eclipse.emf.parsley.dsl.model.ModelPackage;
import org.eclipse.emf.parsley.dsl.model.Texts;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Label Provider</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.emf.parsley.dsl.model.impl.LabelProviderImpl#getTexts <em>Texts</em>}</li>
 *   <li>{@link org.eclipse.emf.parsley.dsl.model.impl.LabelProviderImpl#getImages <em>Images</em>}</li>
 *   <li>{@link org.eclipse.emf.parsley.dsl.model.impl.LabelProviderImpl#getFonts <em>Fonts</em>}</li>
 *   <li>{@link org.eclipse.emf.parsley.dsl.model.impl.LabelProviderImpl#getForegrounds <em>Foregrounds</em>}</li>
 *   <li>{@link org.eclipse.emf.parsley.dsl.model.impl.LabelProviderImpl#getBackgrounds <em>Backgrounds</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LabelProviderImpl extends WithFieldsImpl implements LabelProvider
{
  /**
   * The cached value of the '{@link #getTexts() <em>Texts</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTexts()
   * @generated
   * @ordered
   */
  protected Texts texts;

  /**
   * The cached value of the '{@link #getImages() <em>Images</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImages()
   * @generated
   * @ordered
   */
  protected Images images;

  /**
   * The cached value of the '{@link #getFonts() <em>Fonts</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFonts()
   * @generated
   * @ordered
   */
  protected Fonts fonts;

  /**
   * The cached value of the '{@link #getForegrounds() <em>Foregrounds</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForegrounds()
   * @generated
   * @ordered
   */
  protected Foregrounds foregrounds;

  /**
   * The cached value of the '{@link #getBackgrounds() <em>Backgrounds</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBackgrounds()
   * @generated
   * @ordered
   */
  protected Backgrounds backgrounds;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LabelProviderImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelPackage.Literals.LABEL_PROVIDER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Texts getTexts()
  {
    return texts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTexts(Texts newTexts, NotificationChain msgs)
  {
    Texts oldTexts = texts;
    texts = newTexts;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__TEXTS, oldTexts, newTexts);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTexts(Texts newTexts)
  {
    if (newTexts != texts)
    {
      NotificationChain msgs = null;
      if (texts != null)
        msgs = ((InternalEObject)texts).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__TEXTS, null, msgs);
      if (newTexts != null)
        msgs = ((InternalEObject)newTexts).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__TEXTS, null, msgs);
      msgs = basicSetTexts(newTexts, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__TEXTS, newTexts, newTexts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Images getImages()
  {
    return images;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImages(Images newImages, NotificationChain msgs)
  {
    Images oldImages = images;
    images = newImages;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__IMAGES, oldImages, newImages);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImages(Images newImages)
  {
    if (newImages != images)
    {
      NotificationChain msgs = null;
      if (images != null)
        msgs = ((InternalEObject)images).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__IMAGES, null, msgs);
      if (newImages != null)
        msgs = ((InternalEObject)newImages).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__IMAGES, null, msgs);
      msgs = basicSetImages(newImages, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__IMAGES, newImages, newImages));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fonts getFonts()
  {
    return fonts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFonts(Fonts newFonts, NotificationChain msgs)
  {
    Fonts oldFonts = fonts;
    fonts = newFonts;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__FONTS, oldFonts, newFonts);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFonts(Fonts newFonts)
  {
    if (newFonts != fonts)
    {
      NotificationChain msgs = null;
      if (fonts != null)
        msgs = ((InternalEObject)fonts).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__FONTS, null, msgs);
      if (newFonts != null)
        msgs = ((InternalEObject)newFonts).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__FONTS, null, msgs);
      msgs = basicSetFonts(newFonts, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__FONTS, newFonts, newFonts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Foregrounds getForegrounds()
  {
    return foregrounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetForegrounds(Foregrounds newForegrounds, NotificationChain msgs)
  {
    Foregrounds oldForegrounds = foregrounds;
    foregrounds = newForegrounds;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__FOREGROUNDS, oldForegrounds, newForegrounds);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setForegrounds(Foregrounds newForegrounds)
  {
    if (newForegrounds != foregrounds)
    {
      NotificationChain msgs = null;
      if (foregrounds != null)
        msgs = ((InternalEObject)foregrounds).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__FOREGROUNDS, null, msgs);
      if (newForegrounds != null)
        msgs = ((InternalEObject)newForegrounds).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__FOREGROUNDS, null, msgs);
      msgs = basicSetForegrounds(newForegrounds, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__FOREGROUNDS, newForegrounds, newForegrounds));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Backgrounds getBackgrounds()
  {
    return backgrounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBackgrounds(Backgrounds newBackgrounds, NotificationChain msgs)
  {
    Backgrounds oldBackgrounds = backgrounds;
    backgrounds = newBackgrounds;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__BACKGROUNDS, oldBackgrounds, newBackgrounds);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBackgrounds(Backgrounds newBackgrounds)
  {
    if (newBackgrounds != backgrounds)
    {
      NotificationChain msgs = null;
      if (backgrounds != null)
        msgs = ((InternalEObject)backgrounds).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__BACKGROUNDS, null, msgs);
      if (newBackgrounds != null)
        msgs = ((InternalEObject)newBackgrounds).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelPackage.LABEL_PROVIDER__BACKGROUNDS, null, msgs);
      msgs = basicSetBackgrounds(newBackgrounds, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.LABEL_PROVIDER__BACKGROUNDS, newBackgrounds, newBackgrounds));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelPackage.LABEL_PROVIDER__TEXTS:
        return basicSetTexts(null, msgs);
      case ModelPackage.LABEL_PROVIDER__IMAGES:
        return basicSetImages(null, msgs);
      case ModelPackage.LABEL_PROVIDER__FONTS:
        return basicSetFonts(null, msgs);
      case ModelPackage.LABEL_PROVIDER__FOREGROUNDS:
        return basicSetForegrounds(null, msgs);
      case ModelPackage.LABEL_PROVIDER__BACKGROUNDS:
        return basicSetBackgrounds(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelPackage.LABEL_PROVIDER__TEXTS:
        return getTexts();
      case ModelPackage.LABEL_PROVIDER__IMAGES:
        return getImages();
      case ModelPackage.LABEL_PROVIDER__FONTS:
        return getFonts();
      case ModelPackage.LABEL_PROVIDER__FOREGROUNDS:
        return getForegrounds();
      case ModelPackage.LABEL_PROVIDER__BACKGROUNDS:
        return getBackgrounds();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelPackage.LABEL_PROVIDER__TEXTS:
        setTexts((Texts)newValue);
        return;
      case ModelPackage.LABEL_PROVIDER__IMAGES:
        setImages((Images)newValue);
        return;
      case ModelPackage.LABEL_PROVIDER__FONTS:
        setFonts((Fonts)newValue);
        return;
      case ModelPackage.LABEL_PROVIDER__FOREGROUNDS:
        setForegrounds((Foregrounds)newValue);
        return;
      case ModelPackage.LABEL_PROVIDER__BACKGROUNDS:
        setBackgrounds((Backgrounds)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.LABEL_PROVIDER__TEXTS:
        setTexts((Texts)null);
        return;
      case ModelPackage.LABEL_PROVIDER__IMAGES:
        setImages((Images)null);
        return;
      case ModelPackage.LABEL_PROVIDER__FONTS:
        setFonts((Fonts)null);
        return;
      case ModelPackage.LABEL_PROVIDER__FOREGROUNDS:
        setForegrounds((Foregrounds)null);
        return;
      case ModelPackage.LABEL_PROVIDER__BACKGROUNDS:
        setBackgrounds((Backgrounds)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.LABEL_PROVIDER__TEXTS:
        return texts != null;
      case ModelPackage.LABEL_PROVIDER__IMAGES:
        return images != null;
      case ModelPackage.LABEL_PROVIDER__FONTS:
        return fonts != null;
      case ModelPackage.LABEL_PROVIDER__FOREGROUNDS:
        return foregrounds != null;
      case ModelPackage.LABEL_PROVIDER__BACKGROUNDS:
        return backgrounds != null;
    }
    return super.eIsSet(featureID);
  }

} //LabelProviderImpl
