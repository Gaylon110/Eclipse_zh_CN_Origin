/**
 * generated by Xtext 2.12.0
 */
package org.eclipse.emf.parsley.dsl.model.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.parsley.dsl.model.ModelPackage;
import org.eclipse.emf.parsley.dsl.model.TypeBinding;

import org.eclipse.xtext.common.types.JvmTypeReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Binding</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.emf.parsley.dsl.model.impl.TypeBindingImpl#getTypeToBind <em>Type To Bind</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeBindingImpl extends BindingImpl implements TypeBinding
{
  /**
   * The cached value of the '{@link #getTypeToBind() <em>Type To Bind</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeToBind()
   * @generated
   * @ordered
   */
  protected JvmTypeReference typeToBind;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeBindingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ModelPackage.Literals.TYPE_BINDING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmTypeReference getTypeToBind()
  {
    return typeToBind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeToBind(JvmTypeReference newTypeToBind, NotificationChain msgs)
  {
    JvmTypeReference oldTypeToBind = typeToBind;
    typeToBind = newTypeToBind;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ModelPackage.TYPE_BINDING__TYPE_TO_BIND, oldTypeToBind, newTypeToBind);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeToBind(JvmTypeReference newTypeToBind)
  {
    if (newTypeToBind != typeToBind)
    {
      NotificationChain msgs = null;
      if (typeToBind != null)
        msgs = ((InternalEObject)typeToBind).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ModelPackage.TYPE_BINDING__TYPE_TO_BIND, null, msgs);
      if (newTypeToBind != null)
        msgs = ((InternalEObject)newTypeToBind).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ModelPackage.TYPE_BINDING__TYPE_TO_BIND, null, msgs);
      msgs = basicSetTypeToBind(newTypeToBind, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ModelPackage.TYPE_BINDING__TYPE_TO_BIND, newTypeToBind, newTypeToBind));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ModelPackage.TYPE_BINDING__TYPE_TO_BIND:
        return basicSetTypeToBind(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ModelPackage.TYPE_BINDING__TYPE_TO_BIND:
        return getTypeToBind();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ModelPackage.TYPE_BINDING__TYPE_TO_BIND:
        setTypeToBind((JvmTypeReference)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.TYPE_BINDING__TYPE_TO_BIND:
        setTypeToBind((JvmTypeReference)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ModelPackage.TYPE_BINDING__TYPE_TO_BIND:
        return typeToBind != null;
    }
    return super.eIsSet(featureID);
  }

} //TypeBindingImpl
