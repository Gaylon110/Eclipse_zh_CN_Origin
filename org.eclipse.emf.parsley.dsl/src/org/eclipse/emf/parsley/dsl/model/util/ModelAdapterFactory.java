/**
 * generated by Xtext 2.12.0
 */
package org.eclipse.emf.parsley.dsl.model.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.parsley.dsl.model.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.eclipse.emf.parsley.dsl.model.ModelPackage
 * @generated
 */
public class ModelAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ModelPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ModelPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelSwitch<Adapter> modelSwitch =
    new ModelSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseModule(Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseExtendsClause(ExtendsClause object)
      {
        return createExtendsClauseAdapter();
      }
      @Override
      public Adapter caseBindingsSpecification(BindingsSpecification object)
      {
        return createBindingsSpecificationAdapter();
      }
      @Override
      public Adapter caseBinding(Binding object)
      {
        return createBindingAdapter();
      }
      @Override
      public Adapter caseLabelProvider(LabelProvider object)
      {
        return createLabelProviderAdapter();
      }
      @Override
      public Adapter caseFieldSpecification(FieldSpecification object)
      {
        return createFieldSpecificationAdapter();
      }
      @Override
      public Adapter caseTexts(Texts object)
      {
        return createTextsAdapter();
      }
      @Override
      public Adapter caseImages(Images object)
      {
        return createImagesAdapter();
      }
      @Override
      public Adapter caseFonts(Fonts object)
      {
        return createFontsAdapter();
      }
      @Override
      public Adapter caseForegrounds(Foregrounds object)
      {
        return createForegroundsAdapter();
      }
      @Override
      public Adapter caseBackgrounds(Backgrounds object)
      {
        return createBackgroundsAdapter();
      }
      @Override
      public Adapter caseTableLabelProvider(TableLabelProvider object)
      {
        return createTableLabelProviderAdapter();
      }
      @Override
      public Adapter casePolymorphicSpecification(PolymorphicSpecification object)
      {
        return createPolymorphicSpecificationAdapter();
      }
      @Override
      public Adapter caseFeatureCaptionProvider(FeatureCaptionProvider object)
      {
        return createFeatureCaptionProviderAdapter();
      }
      @Override
      public Adapter caseFormFeatureCaptionProvider(FormFeatureCaptionProvider object)
      {
        return createFormFeatureCaptionProviderAdapter();
      }
      @Override
      public Adapter caseDialogFeatureCaptionProvider(DialogFeatureCaptionProvider object)
      {
        return createDialogFeatureCaptionProviderAdapter();
      }
      @Override
      public Adapter caseFeatureTexts(FeatureTexts object)
      {
        return createFeatureTextsAdapter();
      }
      @Override
      public Adapter caseFeatureImages(FeatureImages object)
      {
        return createFeatureImagesAdapter();
      }
      @Override
      public Adapter caseFeatureFonts(FeatureFonts object)
      {
        return createFeatureFontsAdapter();
      }
      @Override
      public Adapter caseFeatureForegrounds(FeatureForegrounds object)
      {
        return createFeatureForegroundsAdapter();
      }
      @Override
      public Adapter caseFeatureBackgrounds(FeatureBackgrounds object)
      {
        return createFeatureBackgroundsAdapter();
      }
      @Override
      public Adapter caseFeatureLabels(FeatureLabels object)
      {
        return createFeatureLabelsAdapter();
      }
      @Override
      public Adapter caseWithFeatureAssociatedExpressions(WithFeatureAssociatedExpressions object)
      {
        return createWithFeatureAssociatedExpressionsAdapter();
      }
      @Override
      public Adapter caseRowFonts(RowFonts object)
      {
        return createRowFontsAdapter();
      }
      @Override
      public Adapter caseRowForegrounds(RowForegrounds object)
      {
        return createRowForegroundsAdapter();
      }
      @Override
      public Adapter caseRowBackgrounds(RowBackgrounds object)
      {
        return createRowBackgroundsAdapter();
      }
      @Override
      public Adapter caseWithExpressions(WithExpressions object)
      {
        return createWithExpressionsAdapter();
      }
      @Override
      public Adapter caseFeatureAssociatedExpression(FeatureAssociatedExpression object)
      {
        return createFeatureAssociatedExpressionAdapter();
      }
      @Override
      public Adapter caseFeaturesProvider(FeaturesProvider object)
      {
        return createFeaturesProviderAdapter();
      }
      @Override
      public Adapter caseTableFeaturesProvider(TableFeaturesProvider object)
      {
        return createTableFeaturesProviderAdapter();
      }
      @Override
      public Adapter caseFeatureSpecifications(FeatureSpecifications object)
      {
        return createFeatureSpecificationsAdapter();
      }
      @Override
      public Adapter caseFeatureSpecification(FeatureSpecification object)
      {
        return createFeatureSpecificationAdapter();
      }
      @Override
      public Adapter caseFormControlFactory(FormControlFactory object)
      {
        return createFormControlFactoryAdapter();
      }
      @Override
      public Adapter caseDialogControlFactory(DialogControlFactory object)
      {
        return createDialogControlFactoryAdapter();
      }
      @Override
      public Adapter caseControlFactorySpecifications(ControlFactorySpecifications object)
      {
        return createControlFactorySpecificationsAdapter();
      }
      @Override
      public Adapter caseControlFactorySpecification(ControlFactorySpecification object)
      {
        return createControlFactorySpecificationAdapter();
      }
      @Override
      public Adapter caseProposalCreator(ProposalCreator object)
      {
        return createProposalCreatorAdapter();
      }
      @Override
      public Adapter caseMenuBuilder(MenuBuilder object)
      {
        return createMenuBuilderAdapter();
      }
      @Override
      public Adapter caseMenus(Menus object)
      {
        return createMenusAdapter();
      }
      @Override
      public Adapter caseEmfMenus(EmfMenus object)
      {
        return createEmfMenusAdapter();
      }
      @Override
      public Adapter caseConfigurator(Configurator object)
      {
        return createConfiguratorAdapter();
      }
      @Override
      public Adapter caseConfiguratorResourceURI(ConfiguratorResourceURI object)
      {
        return createConfiguratorResourceURIAdapter();
      }
      @Override
      public Adapter caseConfiguratorEClass(ConfiguratorEClass object)
      {
        return createConfiguratorEClassAdapter();
      }
      @Override
      public Adapter caseViewerContentProvider(ViewerContentProvider object)
      {
        return createViewerContentProviderAdapter();
      }
      @Override
      public Adapter caseTableViewerContentProvider(TableViewerContentProvider object)
      {
        return createTableViewerContentProviderAdapter();
      }
      @Override
      public Adapter caseContentProviderChildren(ContentProviderChildren object)
      {
        return createContentProviderChildrenAdapter();
      }
      @Override
      public Adapter caseContentProviderElements(ContentProviderElements object)
      {
        return createContentProviderElementsAdapter();
      }
      @Override
      public Adapter caseResourceManager(ResourceManager object)
      {
        return createResourceManagerAdapter();
      }
      @Override
      public Adapter caseSimpleMethodSpecification(SimpleMethodSpecification object)
      {
        return createSimpleMethodSpecificationAdapter();
      }
      @Override
      public Adapter caseEmfFeatureAccess(EmfFeatureAccess object)
      {
        return createEmfFeatureAccessAdapter();
      }
      @Override
      public Adapter caseAbstractFeatureCaptionProviderWithLabel(AbstractFeatureCaptionProviderWithLabel object)
      {
        return createAbstractFeatureCaptionProviderWithLabelAdapter();
      }
      @Override
      public Adapter caseAbstractFeatureProvider(AbstractFeatureProvider object)
      {
        return createAbstractFeatureProviderAdapter();
      }
      @Override
      public Adapter caseAbstractControlFactory(AbstractControlFactory object)
      {
        return createAbstractControlFactoryAdapter();
      }
      @Override
      public Adapter caseWithExtendsClause(WithExtendsClause object)
      {
        return createWithExtendsClauseAdapter();
      }
      @Override
      public Adapter caseWithFields(WithFields object)
      {
        return createWithFieldsAdapter();
      }
      @Override
      public Adapter casePartsSpecifications(PartsSpecifications object)
      {
        return createPartsSpecificationsAdapter();
      }
      @Override
      public Adapter casePartSpecification(PartSpecification object)
      {
        return createPartSpecificationAdapter();
      }
      @Override
      public Adapter caseViewSpecification(ViewSpecification object)
      {
        return createViewSpecificationAdapter();
      }
      @Override
      public Adapter caseTypeBinding(TypeBinding object)
      {
        return createTypeBindingAdapter();
      }
      @Override
      public Adapter caseProviderBinding(ProviderBinding object)
      {
        return createProviderBindingAdapter();
      }
      @Override
      public Adapter caseValueBinding(ValueBinding object)
      {
        return createValueBindingAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ExtendsClause <em>Extends Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ExtendsClause
   * @generated
   */
  public Adapter createExtendsClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.BindingsSpecification <em>Bindings Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.BindingsSpecification
   * @generated
   */
  public Adapter createBindingsSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Binding <em>Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Binding
   * @generated
   */
  public Adapter createBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.LabelProvider <em>Label Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.LabelProvider
   * @generated
   */
  public Adapter createLabelProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FieldSpecification <em>Field Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FieldSpecification
   * @generated
   */
  public Adapter createFieldSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Texts <em>Texts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Texts
   * @generated
   */
  public Adapter createTextsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Images <em>Images</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Images
   * @generated
   */
  public Adapter createImagesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Fonts <em>Fonts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Fonts
   * @generated
   */
  public Adapter createFontsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Foregrounds <em>Foregrounds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Foregrounds
   * @generated
   */
  public Adapter createForegroundsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Backgrounds <em>Backgrounds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Backgrounds
   * @generated
   */
  public Adapter createBackgroundsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.TableLabelProvider <em>Table Label Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.TableLabelProvider
   * @generated
   */
  public Adapter createTableLabelProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.PolymorphicSpecification <em>Polymorphic Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.PolymorphicSpecification
   * @generated
   */
  public Adapter createPolymorphicSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureCaptionProvider <em>Feature Caption Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureCaptionProvider
   * @generated
   */
  public Adapter createFeatureCaptionProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FormFeatureCaptionProvider <em>Form Feature Caption Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FormFeatureCaptionProvider
   * @generated
   */
  public Adapter createFormFeatureCaptionProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.DialogFeatureCaptionProvider <em>Dialog Feature Caption Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.DialogFeatureCaptionProvider
   * @generated
   */
  public Adapter createDialogFeatureCaptionProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureTexts <em>Feature Texts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureTexts
   * @generated
   */
  public Adapter createFeatureTextsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureImages <em>Feature Images</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureImages
   * @generated
   */
  public Adapter createFeatureImagesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureFonts <em>Feature Fonts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureFonts
   * @generated
   */
  public Adapter createFeatureFontsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureForegrounds <em>Feature Foregrounds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureForegrounds
   * @generated
   */
  public Adapter createFeatureForegroundsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureBackgrounds <em>Feature Backgrounds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureBackgrounds
   * @generated
   */
  public Adapter createFeatureBackgroundsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureLabels <em>Feature Labels</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureLabels
   * @generated
   */
  public Adapter createFeatureLabelsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.WithFeatureAssociatedExpressions <em>With Feature Associated Expressions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.WithFeatureAssociatedExpressions
   * @generated
   */
  public Adapter createWithFeatureAssociatedExpressionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.RowFonts <em>Row Fonts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.RowFonts
   * @generated
   */
  public Adapter createRowFontsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.RowForegrounds <em>Row Foregrounds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.RowForegrounds
   * @generated
   */
  public Adapter createRowForegroundsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.RowBackgrounds <em>Row Backgrounds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.RowBackgrounds
   * @generated
   */
  public Adapter createRowBackgroundsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.WithExpressions <em>With Expressions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.WithExpressions
   * @generated
   */
  public Adapter createWithExpressionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureAssociatedExpression <em>Feature Associated Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureAssociatedExpression
   * @generated
   */
  public Adapter createFeatureAssociatedExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeaturesProvider <em>Features Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeaturesProvider
   * @generated
   */
  public Adapter createFeaturesProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.TableFeaturesProvider <em>Table Features Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.TableFeaturesProvider
   * @generated
   */
  public Adapter createTableFeaturesProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureSpecifications <em>Feature Specifications</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureSpecifications
   * @generated
   */
  public Adapter createFeatureSpecificationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FeatureSpecification <em>Feature Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FeatureSpecification
   * @generated
   */
  public Adapter createFeatureSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.FormControlFactory <em>Form Control Factory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.FormControlFactory
   * @generated
   */
  public Adapter createFormControlFactoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.DialogControlFactory <em>Dialog Control Factory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.DialogControlFactory
   * @generated
   */
  public Adapter createDialogControlFactoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ControlFactorySpecifications <em>Control Factory Specifications</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ControlFactorySpecifications
   * @generated
   */
  public Adapter createControlFactorySpecificationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ControlFactorySpecification <em>Control Factory Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ControlFactorySpecification
   * @generated
   */
  public Adapter createControlFactorySpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ProposalCreator <em>Proposal Creator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ProposalCreator
   * @generated
   */
  public Adapter createProposalCreatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.MenuBuilder <em>Menu Builder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.MenuBuilder
   * @generated
   */
  public Adapter createMenuBuilderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Menus <em>Menus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Menus
   * @generated
   */
  public Adapter createMenusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.EmfMenus <em>Emf Menus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.EmfMenus
   * @generated
   */
  public Adapter createEmfMenusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.Configurator <em>Configurator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.Configurator
   * @generated
   */
  public Adapter createConfiguratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ConfiguratorResourceURI <em>Configurator Resource URI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ConfiguratorResourceURI
   * @generated
   */
  public Adapter createConfiguratorResourceURIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ConfiguratorEClass <em>Configurator EClass</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ConfiguratorEClass
   * @generated
   */
  public Adapter createConfiguratorEClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ViewerContentProvider <em>Viewer Content Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ViewerContentProvider
   * @generated
   */
  public Adapter createViewerContentProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.TableViewerContentProvider <em>Table Viewer Content Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.TableViewerContentProvider
   * @generated
   */
  public Adapter createTableViewerContentProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ContentProviderChildren <em>Content Provider Children</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ContentProviderChildren
   * @generated
   */
  public Adapter createContentProviderChildrenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ContentProviderElements <em>Content Provider Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ContentProviderElements
   * @generated
   */
  public Adapter createContentProviderElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ResourceManager <em>Resource Manager</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ResourceManager
   * @generated
   */
  public Adapter createResourceManagerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.SimpleMethodSpecification <em>Simple Method Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.SimpleMethodSpecification
   * @generated
   */
  public Adapter createSimpleMethodSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.EmfFeatureAccess <em>Emf Feature Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.EmfFeatureAccess
   * @generated
   */
  public Adapter createEmfFeatureAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.AbstractFeatureCaptionProviderWithLabel <em>Abstract Feature Caption Provider With Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.AbstractFeatureCaptionProviderWithLabel
   * @generated
   */
  public Adapter createAbstractFeatureCaptionProviderWithLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.AbstractFeatureProvider <em>Abstract Feature Provider</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.AbstractFeatureProvider
   * @generated
   */
  public Adapter createAbstractFeatureProviderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.AbstractControlFactory <em>Abstract Control Factory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.AbstractControlFactory
   * @generated
   */
  public Adapter createAbstractControlFactoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.WithExtendsClause <em>With Extends Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.WithExtendsClause
   * @generated
   */
  public Adapter createWithExtendsClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.WithFields <em>With Fields</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.WithFields
   * @generated
   */
  public Adapter createWithFieldsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.PartsSpecifications <em>Parts Specifications</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.PartsSpecifications
   * @generated
   */
  public Adapter createPartsSpecificationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.PartSpecification <em>Part Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.PartSpecification
   * @generated
   */
  public Adapter createPartSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ViewSpecification <em>View Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ViewSpecification
   * @generated
   */
  public Adapter createViewSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.TypeBinding <em>Type Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.TypeBinding
   * @generated
   */
  public Adapter createTypeBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ProviderBinding <em>Provider Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ProviderBinding
   * @generated
   */
  public Adapter createProviderBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.emf.parsley.dsl.model.ValueBinding <em>Value Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.emf.parsley.dsl.model.ValueBinding
   * @generated
   */
  public Adapter createValueBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ModelAdapterFactory
