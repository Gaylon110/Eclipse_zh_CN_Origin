/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DotEscStringGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EscStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEscStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinesJustifiedTextParserRuleCall_1_0 = (RuleCall)cLinesAssignment_1.eContents().get(0);
		
		//EscString:
		//	{EscString} lines+=JustifiedText*;
		public ParserRule getRule() { return rule; }

		//{EscString} lines+=JustifiedText*
		public Group getGroup() { return cGroup; }

		//{EscString}
		public Action getEscStringAction_0() { return cEscStringAction_0; }

		//lines+=JustifiedText*
		public Assignment getLinesAssignment_1() { return cLinesAssignment_1; }

		//JustifiedText
		public RuleCall getLinesJustifiedTextParserRuleCall_1_0() { return cLinesJustifiedTextParserRuleCall_1_0; }
	}

	public class JustifiedTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JustifiedText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTextAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTextTEXTParserRuleCall_0_0_0 = (RuleCall)cTextAssignment_0_0.eContents().get(0);
		private final Assignment cJustificationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cJustificationJustificationEnumRuleCall_0_1_0 = (RuleCall)cJustificationAssignment_0_1.eContents().get(0);
		private final Assignment cJustificationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cJustificationJustificationEnumRuleCall_1_0 = (RuleCall)cJustificationAssignment_1.eContents().get(0);
		
		//JustifiedText:
		//	text=TEXT => justification=Justification? | justification=Justification;
		public ParserRule getRule() { return rule; }

		//text=TEXT => justification=Justification? | justification=Justification
		public Alternatives getAlternatives() { return cAlternatives; }

		//text=TEXT => justification=Justification?
		public Group getGroup_0() { return cGroup_0; }

		//text=TEXT
		public Assignment getTextAssignment_0_0() { return cTextAssignment_0_0; }

		//TEXT
		public RuleCall getTextTEXTParserRuleCall_0_0_0() { return cTextTEXTParserRuleCall_0_0_0; }

		//=> justification=Justification?
		public Assignment getJustificationAssignment_0_1() { return cJustificationAssignment_0_1; }

		//Justification
		public RuleCall getJustificationJustificationEnumRuleCall_0_1_0() { return cJustificationJustificationEnumRuleCall_0_1_0; }

		//justification=Justification
		public Assignment getJustificationAssignment_1() { return cJustificationAssignment_1; }

		//Justification
		public RuleCall getJustificationJustificationEnumRuleCall_1_0() { return cJustificationJustificationEnumRuleCall_1_0; }
	}

	public class TEXTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHARTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCHARTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TEXT:
		//	CHAR => CHAR*;
		public ParserRule getRule() { return rule; }

		//CHAR => CHAR*
		public Group getGroup() { return cGroup; }

		//CHAR
		public RuleCall getCHARTerminalRuleCall_0() { return cCHARTerminalRuleCall_0; }

		//=> CHAR*
		public RuleCall getCHARTerminalRuleCall_1() { return cCHARTerminalRuleCall_1; }
	}
	
	
	public class JustificationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Justification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCENTEREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCENTEREDNKeyword_0_0 = (Keyword)cCENTEREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFTLKeyword_1_0 = (Keyword)cLEFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTRKeyword_2_0 = (Keyword)cRIGHTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Justification:
		//	CENTERED="\\n" | LEFT="\\l" | RIGHT="\\r";
		public EnumRule getRule() { return rule; }

		//CENTERED="\\n" | LEFT="\\l" | RIGHT="\\r"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CENTERED="\\n"
		public EnumLiteralDeclaration getCENTEREDEnumLiteralDeclaration_0() { return cCENTEREDEnumLiteralDeclaration_0; }

		//"\\n"
		public Keyword getCENTEREDNKeyword_0_0() { return cCENTEREDNKeyword_0_0; }

		//LEFT="\\l"
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_1() { return cLEFTEnumLiteralDeclaration_1; }

		//"\\l"
		public Keyword getLEFTLKeyword_1_0() { return cLEFTLKeyword_1_0; }

		//RIGHT="\\r"
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_2() { return cRIGHTEnumLiteralDeclaration_2; }

		//"\\r"
		public Keyword getRIGHTRKeyword_2_0() { return cRIGHTRKeyword_2_0; }
	}
	
	private final EscStringElements pEscString;
	private final JustifiedTextElements pJustifiedText;
	private final TEXTElements pTEXT;
	private final JustificationElements unknownRuleJustification;
	private final TerminalRule tCHAR;
	
	private final Grammar grammar;

	@Inject
	public DotEscStringGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pEscString = new EscStringElements();
		this.pJustifiedText = new JustifiedTextElements();
		this.pTEXT = new TEXTElements();
		this.unknownRuleJustification = new JustificationElements();
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHAR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gef.dot.internal.language.DotEscString".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//EscString:
	//	{EscString} lines+=JustifiedText*;
	public EscStringElements getEscStringAccess() {
		return pEscString;
	}
	
	public ParserRule getEscStringRule() {
		return getEscStringAccess().getRule();
	}

	//JustifiedText:
	//	text=TEXT => justification=Justification? | justification=Justification;
	public JustifiedTextElements getJustifiedTextAccess() {
		return pJustifiedText;
	}
	
	public ParserRule getJustifiedTextRule() {
		return getJustifiedTextAccess().getRule();
	}

	//TEXT:
	//	CHAR => CHAR*;
	public TEXTElements getTEXTAccess() {
		return pTEXT;
	}
	
	public ParserRule getTEXTRule() {
		return getTEXTAccess().getRule();
	}

	//enum Justification:
	//	CENTERED="\\n" | LEFT="\\l" | RIGHT="\\r";
	public JustificationElements getJustificationAccess() {
		return unknownRuleJustification;
	}
	
	public EnumRule getJustificationRule() {
		return getJustificationAccess().getRule();
	}

	//terminal CHAR:
	//	.;
	public TerminalRule getCHARRule() {
		return tCHAR;
	} 
}
