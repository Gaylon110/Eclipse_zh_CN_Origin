/*
* generated by Xtext
*/
parser grammar InternalDotHtmlLabelParser;

options {
	tokenVocab=InternalDotHtmlLabelLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gef.dot.internal.language.services.DotHtmlLabelGrammarAccess;

}

@members {


	private DotHtmlLabelGrammarAccess grammarAccess;
	 	
	public InternalDotHtmlLabelParser(TokenStream input, DotHtmlLabelGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "HtmlLabel";	
	} 
	   	   	
	@Override
	protected DotHtmlLabelGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleHtmlLabel
entryRuleHtmlLabel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHtmlLabelRule()); }
	 iv_ruleHtmlLabel=ruleHtmlLabel 
	 { $current=$iv_ruleHtmlLabel.current; } 
	 EOF 
;

// Rule HtmlLabel
ruleHtmlLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getHtmlLabelAccess().getPartsHtmlContentParserRuleCall_0()); 
	    }
		lv_parts_0_0=ruleHtmlContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHtmlLabelRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_0_0, 
        		"HtmlContent");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleHtmlContent
entryRuleHtmlContent returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHtmlContentRule()); }
	 iv_ruleHtmlContent=ruleHtmlContent 
	 { $current=$iv_ruleHtmlContent.current; } 
	 EOF 
;

// Rule HtmlContent
ruleHtmlContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getHtmlContentAccess().getTagHtmlTagParserRuleCall_0_0()); 
	    }
		lv_tag_0_0=ruleHtmlTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHtmlContentRule());
	        }
       		set(
       			$current, 
       			"tag",
        		lv_tag_0_0, 
        		"HtmlTag");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_text_1_0=RULE_TEXT
		{
			newLeafNode(lv_text_1_0, grammarAccess.getHtmlContentAccess().getTextTEXTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHtmlContentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"TEXT");
	    }

)
))
;





// Entry rule entryRuleHtmlTag
entryRuleHtmlTag returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getHtmlTagRule()); }
	 iv_ruleHtmlTag=ruleHtmlTag 
	 { $current=$iv_ruleHtmlTag.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule HtmlTag
ruleHtmlTag returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(this_TAG_START_0=RULE_TAG_START
    { 
    newLeafNode(this_TAG_START_0, grammarAccess.getHtmlTagAccess().getTAG_STARTTerminalRuleCall_0()); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getHtmlTagAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHtmlTagRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getHtmlTagAccess().getAttributesHtmlAttrParserRuleCall_2_0()); 
	    }
		lv_attributes_2_0=ruleHtmlAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHtmlTagRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"HtmlAttr");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		lv_selfClosing_3_0=RULE_TAG_END_CLOSE
		{
			newLeafNode(lv_selfClosing_3_0, grammarAccess.getHtmlTagAccess().getSelfClosingTAG_END_CLOSETerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHtmlTagRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"selfClosing",
        		true, 
        		"TAG_END_CLOSE");
	    }

)
)
    |(this_TAG_END_4=RULE_TAG_END
    { 
    newLeafNode(this_TAG_END_4, grammarAccess.getHtmlTagAccess().getTAG_ENDTerminalRuleCall_3_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHtmlTagAccess().getChildrenHtmlContentParserRuleCall_3_1_1_0()); 
	    }
		lv_children_5_0=ruleHtmlContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHtmlTagRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_5_0, 
        		"HtmlContent");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_TAG_START_CLOSE_6=RULE_TAG_START_CLOSE
    { 
    newLeafNode(this_TAG_START_CLOSE_6, grammarAccess.getHtmlTagAccess().getTAG_START_CLOSETerminalRuleCall_3_1_2()); 
    }
(
(
		lv_closeName_7_0=RULE_ID
		{
			newLeafNode(lv_closeName_7_0, grammarAccess.getHtmlTagAccess().getCloseNameIDTerminalRuleCall_3_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHtmlTagRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"closeName",
        		lv_closeName_7_0, 
        		"ID");
	    }

)
)this_TAG_END_8=RULE_TAG_END
    { 
    newLeafNode(this_TAG_END_8, grammarAccess.getHtmlTagAccess().getTAG_ENDTerminalRuleCall_3_1_4()); 
    }
)))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleHtmlAttr
entryRuleHtmlAttr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHtmlAttrRule()); }
	 iv_ruleHtmlAttr=ruleHtmlAttr 
	 { $current=$iv_ruleHtmlAttr.current; } 
	 EOF 
;

// Rule HtmlAttr
ruleHtmlAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getHtmlAttrAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHtmlAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(this_WS_1=RULE_WS
    { 
    newLeafNode(this_WS_1, grammarAccess.getHtmlAttrAccess().getWSTerminalRuleCall_1()); 
    }
)?this_ASSIGN_2=RULE_ASSIGN
    { 
    newLeafNode(this_ASSIGN_2, grammarAccess.getHtmlAttrAccess().getASSIGNTerminalRuleCall_2()); 
    }
(this_WS_3=RULE_WS
    { 
    newLeafNode(this_WS_3, grammarAccess.getHtmlAttrAccess().getWSTerminalRuleCall_3()); 
    }
)?(
(
		lv_value_4_0=RULE_ATTR_VALUE
		{
			newLeafNode(lv_value_4_0, grammarAccess.getHtmlAttrAccess().getValueATTR_VALUETerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHtmlAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"ATTR_VALUE");
	    }

)
))
;





