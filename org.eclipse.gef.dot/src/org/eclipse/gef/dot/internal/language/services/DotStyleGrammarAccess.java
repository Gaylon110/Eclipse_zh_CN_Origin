/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DotStyleGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Style");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStyleAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStyleItemsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStyleItemsStyleItemParserRuleCall_1_0_0 = (RuleCall)cStyleItemsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStyleItemsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStyleItemsStyleItemParserRuleCall_1_1_1_0 = (RuleCall)cStyleItemsAssignment_1_1_1.eContents().get(0);
		
		//// XXX: While not documented explicitly, an empty style seems to be valid as well
		//Style:
		//	{Style} (styleItems+=StyleItem ("," styleItems+=StyleItem)*)?;
		public ParserRule getRule() { return rule; }

		//{Style} (styleItems+=StyleItem ("," styleItems+=StyleItem)*)?
		public Group getGroup() { return cGroup; }

		//{Style}
		public Action getStyleAction_0() { return cStyleAction_0; }

		//(styleItems+=StyleItem ("," styleItems+=StyleItem)*)?
		public Group getGroup_1() { return cGroup_1; }

		//styleItems+=StyleItem
		public Assignment getStyleItemsAssignment_1_0() { return cStyleItemsAssignment_1_0; }

		//StyleItem
		public RuleCall getStyleItemsStyleItemParserRuleCall_1_0_0() { return cStyleItemsStyleItemParserRuleCall_1_0_0; }

		//("," styleItems+=StyleItem)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//styleItems+=StyleItem
		public Assignment getStyleItemsAssignment_1_1_1() { return cStyleItemsAssignment_1_1_1; }

		//StyleItem
		public RuleCall getStyleItemsStyleItemParserRuleCall_1_1_1_0() { return cStyleItemsStyleItemParserRuleCall_1_1_1_0; }
	}

	public class StyleItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsNAMETerminalRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgsNAMETerminalRuleCall_1_2_1_0 = (RuleCall)cArgsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//StyleItem:
		//	name=NAME ("(" args+=NAME ("," args+=NAME)* ")")?;
		public ParserRule getRule() { return rule; }

		//name=NAME ("(" args+=NAME ("," args+=NAME)* ")")?
		public Group getGroup() { return cGroup; }

		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }

		//("(" args+=NAME ("," args+=NAME)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//args+=NAME
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//NAME
		public RuleCall getArgsNAMETerminalRuleCall_1_1_0() { return cArgsNAMETerminalRuleCall_1_1_0; }

		//("," args+=NAME)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//args+=NAME
		public Assignment getArgsAssignment_1_2_1() { return cArgsAssignment_1_2_1; }

		//NAME
		public RuleCall getArgsNAMETerminalRuleCall_1_2_1_0() { return cArgsNAMETerminalRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	
	
	public class NodeStyleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NodeStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBoldEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBoldBoldKeyword_0_0 = (Keyword)cBoldEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDashedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDashedDashedKeyword_1_0 = (Keyword)cDashedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDiagonalsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDiagonalsDiagonalsKeyword_2_0 = (Keyword)cDiagonalsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDottedEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDottedDottedKeyword_3_0 = (Keyword)cDottedEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFilledEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFilledFilledKeyword_4_0 = (Keyword)cFilledEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cInvisEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cInvisInvisKeyword_5_0 = (Keyword)cInvisEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cRadialEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cRadialRadialKeyword_6_0 = (Keyword)cRadialEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cRoundedEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cRoundedRoundedKeyword_7_0 = (Keyword)cRoundedEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSolidEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSolidSolidKeyword_8_0 = (Keyword)cSolidEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cStripedEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cStripedStripedKeyword_9_0 = (Keyword)cStripedEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cWedgedEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cWedgedWedgedKeyword_10_0 = (Keyword)cWedgedEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum NodeStyle:
		//	bold | dashed | diagonals | dotted | filled | invis | radial | rounded | solid | striped | wedged;
		public EnumRule getRule() { return rule; }

		//bold | dashed | diagonals | dotted | filled | invis | radial | rounded | solid | striped | wedged
		public Alternatives getAlternatives() { return cAlternatives; }

		//bold
		public EnumLiteralDeclaration getBoldEnumLiteralDeclaration_0() { return cBoldEnumLiteralDeclaration_0; }

		//"bold"
		public Keyword getBoldBoldKeyword_0_0() { return cBoldBoldKeyword_0_0; }

		//dashed
		public EnumLiteralDeclaration getDashedEnumLiteralDeclaration_1() { return cDashedEnumLiteralDeclaration_1; }

		//"dashed"
		public Keyword getDashedDashedKeyword_1_0() { return cDashedDashedKeyword_1_0; }

		//diagonals
		public EnumLiteralDeclaration getDiagonalsEnumLiteralDeclaration_2() { return cDiagonalsEnumLiteralDeclaration_2; }

		//"diagonals"
		public Keyword getDiagonalsDiagonalsKeyword_2_0() { return cDiagonalsDiagonalsKeyword_2_0; }

		//dotted
		public EnumLiteralDeclaration getDottedEnumLiteralDeclaration_3() { return cDottedEnumLiteralDeclaration_3; }

		//"dotted"
		public Keyword getDottedDottedKeyword_3_0() { return cDottedDottedKeyword_3_0; }

		//filled
		public EnumLiteralDeclaration getFilledEnumLiteralDeclaration_4() { return cFilledEnumLiteralDeclaration_4; }

		//"filled"
		public Keyword getFilledFilledKeyword_4_0() { return cFilledFilledKeyword_4_0; }

		//invis
		public EnumLiteralDeclaration getInvisEnumLiteralDeclaration_5() { return cInvisEnumLiteralDeclaration_5; }

		//"invis"
		public Keyword getInvisInvisKeyword_5_0() { return cInvisInvisKeyword_5_0; }

		//radial
		public EnumLiteralDeclaration getRadialEnumLiteralDeclaration_6() { return cRadialEnumLiteralDeclaration_6; }

		//"radial"
		public Keyword getRadialRadialKeyword_6_0() { return cRadialRadialKeyword_6_0; }

		//rounded
		public EnumLiteralDeclaration getRoundedEnumLiteralDeclaration_7() { return cRoundedEnumLiteralDeclaration_7; }

		//"rounded"
		public Keyword getRoundedRoundedKeyword_7_0() { return cRoundedRoundedKeyword_7_0; }

		//solid
		public EnumLiteralDeclaration getSolidEnumLiteralDeclaration_8() { return cSolidEnumLiteralDeclaration_8; }

		//"solid"
		public Keyword getSolidSolidKeyword_8_0() { return cSolidSolidKeyword_8_0; }

		//striped
		public EnumLiteralDeclaration getStripedEnumLiteralDeclaration_9() { return cStripedEnumLiteralDeclaration_9; }

		//"striped"
		public Keyword getStripedStripedKeyword_9_0() { return cStripedStripedKeyword_9_0; }

		//wedged
		public EnumLiteralDeclaration getWedgedEnumLiteralDeclaration_10() { return cWedgedEnumLiteralDeclaration_10; }

		//"wedged"
		public Keyword getWedgedWedgedKeyword_10_0() { return cWedgedWedgedKeyword_10_0; }
	}

	public class EdgeStyleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBoldEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBoldBoldKeyword_0_0 = (Keyword)cBoldEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDashedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDashedDashedKeyword_1_0 = (Keyword)cDashedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDottedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDottedDottedKeyword_2_0 = (Keyword)cDottedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInvisEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInvisInvisKeyword_3_0 = (Keyword)cInvisEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSolidEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSolidSolidKeyword_4_0 = (Keyword)cSolidEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTaperedEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTaperedTaperedKeyword_5_0 = (Keyword)cTaperedEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum EdgeStyle:
		//	bold | dashed | dotted | invis | solid | tapered;
		public EnumRule getRule() { return rule; }

		//bold | dashed | dotted | invis | solid | tapered
		public Alternatives getAlternatives() { return cAlternatives; }

		//bold
		public EnumLiteralDeclaration getBoldEnumLiteralDeclaration_0() { return cBoldEnumLiteralDeclaration_0; }

		//"bold"
		public Keyword getBoldBoldKeyword_0_0() { return cBoldBoldKeyword_0_0; }

		//dashed
		public EnumLiteralDeclaration getDashedEnumLiteralDeclaration_1() { return cDashedEnumLiteralDeclaration_1; }

		//"dashed"
		public Keyword getDashedDashedKeyword_1_0() { return cDashedDashedKeyword_1_0; }

		//dotted
		public EnumLiteralDeclaration getDottedEnumLiteralDeclaration_2() { return cDottedEnumLiteralDeclaration_2; }

		//"dotted"
		public Keyword getDottedDottedKeyword_2_0() { return cDottedDottedKeyword_2_0; }

		//invis
		public EnumLiteralDeclaration getInvisEnumLiteralDeclaration_3() { return cInvisEnumLiteralDeclaration_3; }

		//"invis"
		public Keyword getInvisInvisKeyword_3_0() { return cInvisInvisKeyword_3_0; }

		//solid
		public EnumLiteralDeclaration getSolidEnumLiteralDeclaration_4() { return cSolidEnumLiteralDeclaration_4; }

		//"solid"
		public Keyword getSolidSolidKeyword_4_0() { return cSolidSolidKeyword_4_0; }

		//tapered
		public EnumLiteralDeclaration getTaperedEnumLiteralDeclaration_5() { return cTaperedEnumLiteralDeclaration_5; }

		//"tapered"
		public Keyword getTaperedTaperedKeyword_5_0() { return cTaperedTaperedKeyword_5_0; }
	}
	
	private final StyleElements pStyle;
	private final StyleItemElements pStyleItem;
	private final TerminalRule tWS;
	private final TerminalRule tNAME;
	private final NodeStyleElements unknownRuleNodeStyle;
	private final EdgeStyleElements unknownRuleEdgeStyle;
	
	private final Grammar grammar;

	@Inject
	public DotStyleGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pStyle = new StyleElements();
		this.pStyleItem = new StyleItemElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAME");
		this.unknownRuleNodeStyle = new NodeStyleElements();
		this.unknownRuleEdgeStyle = new EdgeStyleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gef.dot.internal.language.DotStyle".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// XXX: While not documented explicitly, an empty style seems to be valid as well
	//Style:
	//	{Style} (styleItems+=StyleItem ("," styleItems+=StyleItem)*)?;
	public StyleElements getStyleAccess() {
		return pStyle;
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}

	//StyleItem:
	//	name=NAME ("(" args+=NAME ("," args+=NAME)* ")")?;
	public StyleItemElements getStyleItemAccess() {
		return pStyleItem;
	}
	
	public ParserRule getStyleItemRule() {
		return getStyleItemAccess().getRule();
	}

	//terminal WS:
	//	" " | "\t" | "\r" | "\n";
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal NAME:
	//	!(WS | "(" | ")" | ",")*;
	public TerminalRule getNAMERule() {
		return tNAME;
	} 

	//enum NodeStyle:
	//	bold | dashed | diagonals | dotted | filled | invis | radial | rounded | solid | striped | wedged;
	public NodeStyleElements getNodeStyleAccess() {
		return unknownRuleNodeStyle;
	}
	
	public EnumRule getNodeStyleRule() {
		return getNodeStyleAccess().getRule();
	}

	//enum EdgeStyle:
	//	bold | dashed | dotted | invis | solid | tapered;
	public EdgeStyleElements getEdgeStyleAccess() {
		return unknownRuleEdgeStyle;
	}
	
	public EnumRule getEdgeStyleRule() {
		return getEdgeStyleAccess().getRule();
	}
}
