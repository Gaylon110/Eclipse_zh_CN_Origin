/*
* generated by Xtext
*/
parser grammar InternalDotColorParser;

options {
	tokenVocab=InternalDotColorLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gef.dot.internal.language.services.DotColorGrammarAccess;

}

@members {


	private DotColorGrammarAccess grammarAccess;
	 	
	public InternalDotColorParser(TokenStream input, DotColorGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Color";	
	} 
	   	   	
	@Override
	protected DotColorGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleColor
entryRuleColor returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getColorRule()); }
	 iv_ruleColor=ruleColor 
	 { $current=$iv_ruleColor.current; } 
	 EOF 
;

// Rule Color
ruleColor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getColorAccess().getRGBColorParserRuleCall_0()); 
    }
    this_RGBColor_0=ruleRGBColor
    {
        $current = $this_RGBColor_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getColorAccess().getHSVColorParserRuleCall_1()); 
    }
    this_HSVColor_1=ruleHSVColor
    {
        $current = $this_HSVColor_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getColorAccess().getStringColorParserRuleCall_2()); 
    }
    this_StringColor_2=ruleStringColor
    {
        $current = $this_StringColor_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRGBColor
entryRuleRGBColor returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRGBColorRule()); }
	 iv_ruleRGBColor=ruleRGBColor 
	 { $current=$iv_ruleRGBColor.current; } 
	 EOF 
;

// Rule RGBColor
ruleRGBColor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=NumberSign
    {
    	newLeafNode(otherlv_0, grammarAccess.getRGBColorAccess().getNumberSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRGBColorAccess().getRHexParserRuleCall_1_0()); 
	    }
		lv_r_1_0=rulehex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRGBColorRule());
	        }
       		set(
       			$current, 
       			"r",
        		lv_r_1_0, 
        		"hex");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRGBColorAccess().getGHexParserRuleCall_2_0()); 
	    }
		lv_g_2_0=rulehex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRGBColorRule());
	        }
       		set(
       			$current, 
       			"g",
        		lv_g_2_0, 
        		"hex");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRGBColorAccess().getBHexParserRuleCall_3_0()); 
	    }
		lv_b_3_0=rulehex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRGBColorRule());
	        }
       		set(
       			$current, 
       			"b",
        		lv_b_3_0, 
        		"hex");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRGBColorAccess().getAHexParserRuleCall_4_0()); 
	    }
		lv_a_4_0=rulehex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRGBColorRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_4_0, 
        		"hex");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleHSVColor
entryRuleHSVColor returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getHSVColorRule()); }
	 iv_ruleHSVColor=ruleHSVColor 
	 { $current=$iv_ruleHSVColor.current; } 
	 EOF 
;

// Rule HSVColor
ruleHSVColor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_h_0_0=RULE_COLOR_NUMBER
		{
			newLeafNode(lv_h_0_0, grammarAccess.getHSVColorAccess().getHCOLOR_NUMBERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHSVColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"h",
        		lv_h_0_0, 
        		"COLOR_NUMBER");
	    }

)
)(
	otherlv_1=Comma
    {
    	newLeafNode(otherlv_1, grammarAccess.getHSVColorAccess().getCommaKeyword_1());
    }
)?(
(
		lv_s_2_0=RULE_COLOR_NUMBER
		{
			newLeafNode(lv_s_2_0, grammarAccess.getHSVColorAccess().getSCOLOR_NUMBERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHSVColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"s",
        		lv_s_2_0, 
        		"COLOR_NUMBER");
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getHSVColorAccess().getCommaKeyword_3());
    }
)?(
(
		lv_v_4_0=RULE_COLOR_NUMBER
		{
			newLeafNode(lv_v_4_0, grammarAccess.getHSVColorAccess().getVCOLOR_NUMBERTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHSVColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"v",
        		lv_v_4_0, 
        		"COLOR_NUMBER");
	    }

)
))
;





// Entry rule entryRuleStringColor
entryRuleStringColor returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringColorRule()); }
	 iv_ruleStringColor=ruleStringColor 
	 { $current=$iv_ruleStringColor.current; } 
	 EOF 
;

// Rule StringColor
ruleStringColor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Solidus
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringColorAccess().getSolidusKeyword_0_0());
    }
(
(
		lv_scheme_1_0=RULE_COLOR_STRING
		{
			newLeafNode(lv_scheme_1_0, grammarAccess.getStringColorAccess().getSchemeCOLOR_STRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"scheme",
        		lv_scheme_1_0, 
        		"COLOR_STRING");
	    }

)
)?
	otherlv_2=Solidus
    {
    	newLeafNode(otherlv_2, grammarAccess.getStringColorAccess().getSolidusKeyword_0_2());
    }
)?(
(
(
		lv_name_3_1=RULE_HEXADECIMAL_DIGIT
		{
			newLeafNode(lv_name_3_1, grammarAccess.getStringColorAccess().getNameHEXADECIMAL_DIGITTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_1, 
        		"HEXADECIMAL_DIGIT");
	    }

    |		lv_name_3_2=RULE_COLOR_STRING
		{
			newLeafNode(lv_name_3_2, grammarAccess.getStringColorAccess().getNameCOLOR_STRINGTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_2, 
        		"COLOR_STRING");
	    }

    |		lv_name_3_3=RULE_COLOR_NUMBER
		{
			newLeafNode(lv_name_3_3, grammarAccess.getStringColorAccess().getNameCOLOR_NUMBERTerminalRuleCall_1_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_3, 
        		"COLOR_NUMBER");
	    }

)

)
))
;





// Entry rule entryRulehex
entryRulehex returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getHexRule()); } 
	 iv_rulehex=rulehex 
	 { $current=$iv_rulehex.current.getText(); }  
	 EOF 
;

// Rule hex
rulehex returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_HEXADECIMAL_DIGIT_0=RULE_HEXADECIMAL_DIGIT    {
		$current.merge(this_HEXADECIMAL_DIGIT_0);
    }

    { 
    newLeafNode(this_HEXADECIMAL_DIGIT_0, grammarAccess.getHexAccess().getHEXADECIMAL_DIGITTerminalRuleCall_0()); 
    }
    this_HEXADECIMAL_DIGIT_1=RULE_HEXADECIMAL_DIGIT    {
		$current.merge(this_HEXADECIMAL_DIGIT_1);
    }

    { 
    newLeafNode(this_HEXADECIMAL_DIGIT_1, grammarAccess.getHexAccess().getHEXADECIMAL_DIGITTerminalRuleCall_1()); 
    }
)
    ;





