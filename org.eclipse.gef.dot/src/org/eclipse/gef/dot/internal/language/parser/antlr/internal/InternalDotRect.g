/*
* generated by Xtext
*/
grammar InternalDotRect;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gef.dot.internal.language.services.DotRectGrammarAccess;

}

@parser::members {

 	private DotRectGrammarAccess grammarAccess;
 	
    public InternalDotRectParser(TokenStream input, DotRectGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Rect";	
   	}
   	
   	@Override
   	protected DotRectGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRect
entryRuleRect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRectRule()); }
	 iv_ruleRect=ruleRect 
	 { $current=$iv_ruleRect.current; } 
	 EOF 
;

// Rule Rect
ruleRect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_llx_0_0=RULE_DOUBLE
		{
			newLeafNode(lv_llx_0_0, grammarAccess.getRectAccess().getLlxDOUBLETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"llx",
        		lv_llx_0_0, 
        		"DOUBLE");
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRectAccess().getCommaKeyword_1());
    }
(
(
		lv_lly_2_0=RULE_DOUBLE
		{
			newLeafNode(lv_lly_2_0, grammarAccess.getRectAccess().getLlyDOUBLETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lly",
        		lv_lly_2_0, 
        		"DOUBLE");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRectAccess().getCommaKeyword_3());
    }
(
(
		lv_urx_4_0=RULE_DOUBLE
		{
			newLeafNode(lv_urx_4_0, grammarAccess.getRectAccess().getUrxDOUBLETerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"urx",
        		lv_urx_4_0, 
        		"DOUBLE");
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRectAccess().getCommaKeyword_5());
    }
(
(
		lv_ury_6_0=RULE_DOUBLE
		{
			newLeafNode(lv_ury_6_0, grammarAccess.getRectAccess().getUryDOUBLETerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ury",
        		lv_ury_6_0, 
        		"DOUBLE");
	    }

)
))
;





RULE_DOUBLE : '-'? ('.' ('0'..'9')+|('0'..'9')+ ('.' ('0'..'9')*)?);

RULE_WS : (' '|'\t'|'\r'|'\n')+;


