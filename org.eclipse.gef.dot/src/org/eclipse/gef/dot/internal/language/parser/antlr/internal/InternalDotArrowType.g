/*
* generated by Xtext
*/
grammar InternalDotArrowType;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gef.dot.internal.language.services.DotArrowTypeGrammarAccess;

}

@parser::members {

 	private DotArrowTypeGrammarAccess grammarAccess;
 	
    public InternalDotArrowTypeParser(TokenStream input, DotArrowTypeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ArrowType";	
   	}
   	
   	@Override
   	protected DotArrowTypeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleArrowType
entryRuleArrowType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrowTypeRule()); }
	 iv_ruleArrowType=ruleArrowType 
	 { $current=$iv_ruleArrowType.current; } 
	 EOF 
;

// Rule ArrowType
ruleArrowType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowTypeAccess().getArrowShapesAbstractArrowShapeParserRuleCall_0_0()); 
	    }
		lv_arrowShapes_0_0=ruleAbstractArrowShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowTypeRule());
	        }
       		add(
       			$current, 
       			"arrowShapes",
        		lv_arrowShapes_0_0, 
        		"AbstractArrowShape");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowTypeAccess().getArrowShapesAbstractArrowShapeParserRuleCall_1_0_0()); 
	    }
		lv_arrowShapes_1_0=ruleAbstractArrowShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowTypeRule());
	        }
       		add(
       			$current, 
       			"arrowShapes",
        		lv_arrowShapes_1_0, 
        		"AbstractArrowShape");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowTypeAccess().getArrowShapesAbstractArrowShapeParserRuleCall_1_1_0_0()); 
	    }
		lv_arrowShapes_2_0=ruleAbstractArrowShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowTypeRule());
	        }
       		add(
       			$current, 
       			"arrowShapes",
        		lv_arrowShapes_2_0, 
        		"AbstractArrowShape");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowTypeAccess().getArrowShapesAbstractArrowShapeParserRuleCall_1_1_1_0()); 
	    }
		lv_arrowShapes_3_0=ruleAbstractArrowShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowTypeRule());
	        }
       		add(
       			$current, 
       			"arrowShapes",
        		lv_arrowShapes_3_0, 
        		"AbstractArrowShape");
	        afterParserOrEnumRuleCall();
	    }

)
)?)?)?)
;





// Entry rule entryRuleAbstractArrowShape
entryRuleAbstractArrowShape returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractArrowShapeRule()); }
	 iv_ruleAbstractArrowShape=ruleAbstractArrowShape 
	 { $current=$iv_ruleAbstractArrowShape.current; } 
	 EOF 
;

// Rule AbstractArrowShape
ruleAbstractArrowShape returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractArrowShapeAccess().getArrowShapeParserRuleCall_0()); 
    }
    this_ArrowShape_0=ruleArrowShape
    { 
        $current = $this_ArrowShape_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractArrowShapeAccess().getDeprecatedArrowShapeParserRuleCall_1()); 
    }
    this_DeprecatedArrowShape_1=ruleDeprecatedArrowShape
    { 
        $current = $this_DeprecatedArrowShape_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrowShape
entryRuleArrowShape returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrowShapeRule()); }
	 iv_ruleArrowShape=ruleArrowShape 
	 { $current=$iv_ruleArrowShape.current; } 
	 EOF 
;

// Rule ArrowShape
ruleArrowShape returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_open_0_0=	'o' 
    {
        newLeafNode(lv_open_0_0, grammarAccess.getArrowShapeAccess().getOpenOKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrowShapeRule());
	        }
       		setWithLastConsumed($current, "open", true, "o");
	    }

)
)?(
(
(
		lv_side_1_1=	'l' 
    {
        newLeafNode(lv_side_1_1, grammarAccess.getArrowShapeAccess().getSideLKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrowShapeRule());
	        }
       		setWithLastConsumed($current, "side", lv_side_1_1, null);
	    }

    |		lv_side_1_2=	'r' 
    {
        newLeafNode(lv_side_1_2, grammarAccess.getArrowShapeAccess().getSideRKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrowShapeRule());
	        }
       		setWithLastConsumed($current, "side", lv_side_1_2, null);
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowShapeAccess().getShapePrimitiveShapeEnumRuleCall_2_0()); 
	    }
		lv_shape_2_0=rulePrimitiveShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowShapeRule());
	        }
       		set(
       			$current, 
       			"shape",
        		lv_shape_2_0, 
        		"PrimitiveShape");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeprecatedArrowShape
entryRuleDeprecatedArrowShape returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeprecatedArrowShapeRule()); }
	 iv_ruleDeprecatedArrowShape=ruleDeprecatedArrowShape 
	 { $current=$iv_ruleDeprecatedArrowShape.current; } 
	 EOF 
;

// Rule DeprecatedArrowShape
ruleDeprecatedArrowShape returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeprecatedArrowShapeAccess().getShapeDeprecatedShapeEnumRuleCall_0()); 
	    }
		lv_shape_0_0=ruleDeprecatedShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeprecatedArrowShapeRule());
	        }
       		set(
       			$current, 
       			"shape",
        		lv_shape_0_0, 
        		"DeprecatedShape");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Rule DeprecatedShape
ruleDeprecatedShape returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='ediamond' 
	{
        $current = grammarAccess.getDeprecatedShapeAccess().getEdiamondEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDeprecatedShapeAccess().getEdiamondEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='open' 
	{
        $current = grammarAccess.getDeprecatedShapeAccess().getOpenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDeprecatedShapeAccess().getOpenEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='halfopen' 
	{
        $current = grammarAccess.getDeprecatedShapeAccess().getHalfopenEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDeprecatedShapeAccess().getHalfopenEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='empty' 
	{
        $current = grammarAccess.getDeprecatedShapeAccess().getEmptyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDeprecatedShapeAccess().getEmptyEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='invempty' 
	{
        $current = grammarAccess.getDeprecatedShapeAccess().getInvemptyEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getDeprecatedShapeAccess().getInvemptyEnumLiteralDeclaration_4()); 
    }
));



// Rule PrimitiveShape
rulePrimitiveShape returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='box' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getBoxEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveShapeAccess().getBoxEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='crow' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getCrowEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveShapeAccess().getCrowEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='curve' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getCurveEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveShapeAccess().getCurveEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='icurve' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getIcurveEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPrimitiveShapeAccess().getIcurveEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='diamond' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getDiamondEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPrimitiveShapeAccess().getDiamondEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='dot' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getDotEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getPrimitiveShapeAccess().getDotEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='inv' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getInvEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getPrimitiveShapeAccess().getInvEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='none' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getNoneEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getPrimitiveShapeAccess().getNoneEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='normal' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getNormalEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getPrimitiveShapeAccess().getNormalEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='tee' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getTeeEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getPrimitiveShapeAccess().getTeeEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='vee' 
	{
        $current = grammarAccess.getPrimitiveShapeAccess().getVeeEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getPrimitiveShapeAccess().getVeeEnumLiteralDeclaration_10()); 
    }
));




