/*
* generated by Xtext
*/
grammar InternalDotShape;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gef.dot.internal.language.services.DotShapeGrammarAccess;

}

@parser::members {

 	private DotShapeGrammarAccess grammarAccess;
 	
    public InternalDotShapeParser(TokenStream input, DotShapeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Shape";	
   	}
   	
   	@Override
   	protected DotShapeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleShape
entryRuleShape returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShapeRule()); }
	 iv_ruleShape=ruleShape 
	 { $current=$iv_ruleShape.current; } 
	 EOF 
;

// Rule Shape
ruleShape returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getShapeAccess().getShapePolygonBasedShapeParserRuleCall_0_0()); 
	    }
		lv_shape_0_1=rulePolygonBasedShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShapeRule());
	        }
       		set(
       			$current, 
       			"shape",
        		lv_shape_0_1, 
        		"PolygonBasedShape");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getShapeAccess().getShapeRecordBasedShapeParserRuleCall_0_1()); 
	    }
		lv_shape_0_2=ruleRecordBasedShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShapeRule());
	        }
       		set(
       			$current, 
       			"shape",
        		lv_shape_0_2, 
        		"RecordBasedShape");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRulePolygonBasedShape
entryRulePolygonBasedShape returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPolygonBasedShapeRule()); }
	 iv_rulePolygonBasedShape=rulePolygonBasedShape 
	 { $current=$iv_rulePolygonBasedShape.current; } 
	 EOF 
;

// Rule PolygonBasedShape
rulePolygonBasedShape returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPolygonBasedShapeAccess().getShapePolygonBasedNodeShapeEnumRuleCall_0()); 
	    }
		lv_shape_0_0=rulePolygonBasedNodeShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPolygonBasedShapeRule());
	        }
       		set(
       			$current, 
       			"shape",
        		lv_shape_0_0, 
        		"PolygonBasedNodeShape");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleRecordBasedShape
entryRuleRecordBasedShape returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordBasedShapeRule()); }
	 iv_ruleRecordBasedShape=ruleRecordBasedShape 
	 { $current=$iv_ruleRecordBasedShape.current; } 
	 EOF 
;

// Rule RecordBasedShape
ruleRecordBasedShape returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordBasedShapeAccess().getShapeRecordBasedNodeShapeEnumRuleCall_0()); 
	    }
		lv_shape_0_0=ruleRecordBasedNodeShape		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordBasedShapeRule());
	        }
       		set(
       			$current, 
       			"shape",
        		lv_shape_0_0, 
        		"RecordBasedNodeShape");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Rule PolygonBasedNodeShape
rulePolygonBasedNodeShape returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='box' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getBoxEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPolygonBasedNodeShapeAccess().getBoxEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='polygon' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getPolygonEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPolygonBasedNodeShapeAccess().getPolygonEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='ellipse' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getEllipseEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPolygonBasedNodeShapeAccess().getEllipseEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='oval' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getOvalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPolygonBasedNodeShapeAccess().getOvalEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='circle' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getCircleEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPolygonBasedNodeShapeAccess().getCircleEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='point' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getPointEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getPolygonBasedNodeShapeAccess().getPointEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='egg' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getEggEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getPolygonBasedNodeShapeAccess().getEggEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='triangle' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getTriangleEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getPolygonBasedNodeShapeAccess().getTriangleEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='plaintext' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getPlaintextEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getPolygonBasedNodeShapeAccess().getPlaintextEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='plain' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getPlainEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getPolygonBasedNodeShapeAccess().getPlainEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='diamond' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getDiamondEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getPolygonBasedNodeShapeAccess().getDiamondEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='trapezium' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getTrapeziumEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getPolygonBasedNodeShapeAccess().getTrapeziumEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='parallelogram' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getParallelogramEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getPolygonBasedNodeShapeAccess().getParallelogramEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='house' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getHouseEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getPolygonBasedNodeShapeAccess().getHouseEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='pentagon' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getPentagonEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getPolygonBasedNodeShapeAccess().getPentagonEnumLiteralDeclaration_14()); 
    }
)
    |(	enumLiteral_15='hexagon' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getHexagonEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getPolygonBasedNodeShapeAccess().getHexagonEnumLiteralDeclaration_15()); 
    }
)
    |(	enumLiteral_16='septagon' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getSeptagonEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getPolygonBasedNodeShapeAccess().getSeptagonEnumLiteralDeclaration_16()); 
    }
)
    |(	enumLiteral_17='octagon' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getOctagonEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getPolygonBasedNodeShapeAccess().getOctagonEnumLiteralDeclaration_17()); 
    }
)
    |(	enumLiteral_18='doublecircle' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getDoublecircleEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getPolygonBasedNodeShapeAccess().getDoublecircleEnumLiteralDeclaration_18()); 
    }
)
    |(	enumLiteral_19='doubleoctagon' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getDoubleoctagonEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getPolygonBasedNodeShapeAccess().getDoubleoctagonEnumLiteralDeclaration_19()); 
    }
)
    |(	enumLiteral_20='tripleoctagon' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getTripleoctagonEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_20, grammarAccess.getPolygonBasedNodeShapeAccess().getTripleoctagonEnumLiteralDeclaration_20()); 
    }
)
    |(	enumLiteral_21='invtriangle' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getInvtriangleEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_21, grammarAccess.getPolygonBasedNodeShapeAccess().getInvtriangleEnumLiteralDeclaration_21()); 
    }
)
    |(	enumLiteral_22='invtrapezium' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getInvtrapeziumEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_22, grammarAccess.getPolygonBasedNodeShapeAccess().getInvtrapeziumEnumLiteralDeclaration_22()); 
    }
)
    |(	enumLiteral_23='invhouse' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getInvhouseEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_23, grammarAccess.getPolygonBasedNodeShapeAccess().getInvhouseEnumLiteralDeclaration_23()); 
    }
)
    |(	enumLiteral_24='Mdiamond' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getMdiamondEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_24, grammarAccess.getPolygonBasedNodeShapeAccess().getMdiamondEnumLiteralDeclaration_24()); 
    }
)
    |(	enumLiteral_25='Msquare' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getMsquareEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_25, grammarAccess.getPolygonBasedNodeShapeAccess().getMsquareEnumLiteralDeclaration_25()); 
    }
)
    |(	enumLiteral_26='Mcircle' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getMcircleEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_26, grammarAccess.getPolygonBasedNodeShapeAccess().getMcircleEnumLiteralDeclaration_26()); 
    }
)
    |(	enumLiteral_27='rect' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getRectEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_27, grammarAccess.getPolygonBasedNodeShapeAccess().getRectEnumLiteralDeclaration_27()); 
    }
)
    |(	enumLiteral_28='rectangle' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getRectangleEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_28, grammarAccess.getPolygonBasedNodeShapeAccess().getRectangleEnumLiteralDeclaration_28()); 
    }
)
    |(	enumLiteral_29='square' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getSquareEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_29, grammarAccess.getPolygonBasedNodeShapeAccess().getSquareEnumLiteralDeclaration_29()); 
    }
)
    |(	enumLiteral_30='star' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getStarEnumLiteralDeclaration_30().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_30, grammarAccess.getPolygonBasedNodeShapeAccess().getStarEnumLiteralDeclaration_30()); 
    }
)
    |(	enumLiteral_31='none' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getNoneEnumLiteralDeclaration_31().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_31, grammarAccess.getPolygonBasedNodeShapeAccess().getNoneEnumLiteralDeclaration_31()); 
    }
)
    |(	enumLiteral_32='underline' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getUnderlineEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_32, grammarAccess.getPolygonBasedNodeShapeAccess().getUnderlineEnumLiteralDeclaration_32()); 
    }
)
    |(	enumLiteral_33='cylinder' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getCylinderEnumLiteralDeclaration_33().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_33, grammarAccess.getPolygonBasedNodeShapeAccess().getCylinderEnumLiteralDeclaration_33()); 
    }
)
    |(	enumLiteral_34='note' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getNoteEnumLiteralDeclaration_34().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_34, grammarAccess.getPolygonBasedNodeShapeAccess().getNoteEnumLiteralDeclaration_34()); 
    }
)
    |(	enumLiteral_35='tab' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getTabEnumLiteralDeclaration_35().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_35, grammarAccess.getPolygonBasedNodeShapeAccess().getTabEnumLiteralDeclaration_35()); 
    }
)
    |(	enumLiteral_36='folder' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getFolderEnumLiteralDeclaration_36().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_36, grammarAccess.getPolygonBasedNodeShapeAccess().getFolderEnumLiteralDeclaration_36()); 
    }
)
    |(	enumLiteral_37='box3d' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getBox3dEnumLiteralDeclaration_37().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_37, grammarAccess.getPolygonBasedNodeShapeAccess().getBox3dEnumLiteralDeclaration_37()); 
    }
)
    |(	enumLiteral_38='component' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getComponentEnumLiteralDeclaration_38().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_38, grammarAccess.getPolygonBasedNodeShapeAccess().getComponentEnumLiteralDeclaration_38()); 
    }
)
    |(	enumLiteral_39='promoter' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getPromoterEnumLiteralDeclaration_39().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_39, grammarAccess.getPolygonBasedNodeShapeAccess().getPromoterEnumLiteralDeclaration_39()); 
    }
)
    |(	enumLiteral_40='cds' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getCdsEnumLiteralDeclaration_40().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_40, grammarAccess.getPolygonBasedNodeShapeAccess().getCdsEnumLiteralDeclaration_40()); 
    }
)
    |(	enumLiteral_41='terminator' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getTerminatorEnumLiteralDeclaration_41().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_41, grammarAccess.getPolygonBasedNodeShapeAccess().getTerminatorEnumLiteralDeclaration_41()); 
    }
)
    |(	enumLiteral_42='utr' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getUtrEnumLiteralDeclaration_42().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_42, grammarAccess.getPolygonBasedNodeShapeAccess().getUtrEnumLiteralDeclaration_42()); 
    }
)
    |(	enumLiteral_43='primersite' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getPrimersiteEnumLiteralDeclaration_43().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_43, grammarAccess.getPolygonBasedNodeShapeAccess().getPrimersiteEnumLiteralDeclaration_43()); 
    }
)
    |(	enumLiteral_44='restrictionsite' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getRestrictionsiteEnumLiteralDeclaration_44().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_44, grammarAccess.getPolygonBasedNodeShapeAccess().getRestrictionsiteEnumLiteralDeclaration_44()); 
    }
)
    |(	enumLiteral_45='fivepoverhang' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getFivepoverhangEnumLiteralDeclaration_45().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_45, grammarAccess.getPolygonBasedNodeShapeAccess().getFivepoverhangEnumLiteralDeclaration_45()); 
    }
)
    |(	enumLiteral_46='threepoverhang' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getThreepoverhangEnumLiteralDeclaration_46().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_46, grammarAccess.getPolygonBasedNodeShapeAccess().getThreepoverhangEnumLiteralDeclaration_46()); 
    }
)
    |(	enumLiteral_47='noverhang' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getNoverhangEnumLiteralDeclaration_47().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_47, grammarAccess.getPolygonBasedNodeShapeAccess().getNoverhangEnumLiteralDeclaration_47()); 
    }
)
    |(	enumLiteral_48='assembly' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getAssemblyEnumLiteralDeclaration_48().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_48, grammarAccess.getPolygonBasedNodeShapeAccess().getAssemblyEnumLiteralDeclaration_48()); 
    }
)
    |(	enumLiteral_49='signature' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getSignatureEnumLiteralDeclaration_49().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_49, grammarAccess.getPolygonBasedNodeShapeAccess().getSignatureEnumLiteralDeclaration_49()); 
    }
)
    |(	enumLiteral_50='insulator' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getInsulatorEnumLiteralDeclaration_50().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_50, grammarAccess.getPolygonBasedNodeShapeAccess().getInsulatorEnumLiteralDeclaration_50()); 
    }
)
    |(	enumLiteral_51='ribosite' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getRibositeEnumLiteralDeclaration_51().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_51, grammarAccess.getPolygonBasedNodeShapeAccess().getRibositeEnumLiteralDeclaration_51()); 
    }
)
    |(	enumLiteral_52='rnastab' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getRnastabEnumLiteralDeclaration_52().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_52, grammarAccess.getPolygonBasedNodeShapeAccess().getRnastabEnumLiteralDeclaration_52()); 
    }
)
    |(	enumLiteral_53='proteasesite' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getProteasesiteEnumLiteralDeclaration_53().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_53, grammarAccess.getPolygonBasedNodeShapeAccess().getProteasesiteEnumLiteralDeclaration_53()); 
    }
)
    |(	enumLiteral_54='proteinstab' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getProteinstabEnumLiteralDeclaration_54().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_54, grammarAccess.getPolygonBasedNodeShapeAccess().getProteinstabEnumLiteralDeclaration_54()); 
    }
)
    |(	enumLiteral_55='rpromoter' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getRpromoterEnumLiteralDeclaration_55().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_55, grammarAccess.getPolygonBasedNodeShapeAccess().getRpromoterEnumLiteralDeclaration_55()); 
    }
)
    |(	enumLiteral_56='rarrow' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getRarrowEnumLiteralDeclaration_56().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_56, grammarAccess.getPolygonBasedNodeShapeAccess().getRarrowEnumLiteralDeclaration_56()); 
    }
)
    |(	enumLiteral_57='larrow' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getLarrowEnumLiteralDeclaration_57().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_57, grammarAccess.getPolygonBasedNodeShapeAccess().getLarrowEnumLiteralDeclaration_57()); 
    }
)
    |(	enumLiteral_58='lpromoter' 
	{
        $current = grammarAccess.getPolygonBasedNodeShapeAccess().getLpromoterEnumLiteralDeclaration_58().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_58, grammarAccess.getPolygonBasedNodeShapeAccess().getLpromoterEnumLiteralDeclaration_58()); 
    }
));



// Rule RecordBasedNodeShape
ruleRecordBasedNodeShape returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='record' 
	{
        $current = grammarAccess.getRecordBasedNodeShapeAccess().getRecordEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRecordBasedNodeShapeAccess().getRecordEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Mrecord' 
	{
        $current = grammarAccess.getRecordBasedNodeShapeAccess().getMrecordEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRecordBasedNodeShapeAccess().getMrecordEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


