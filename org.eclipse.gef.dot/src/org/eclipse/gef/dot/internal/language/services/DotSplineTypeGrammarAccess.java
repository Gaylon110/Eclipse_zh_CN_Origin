/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.gef.dot.internal.language.services.DotPointGrammarAccess;

@Singleton
public class DotSplineTypeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SplineTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SplineType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSplinesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSplinesSplineParserRuleCall_0_0 = (RuleCall)cSplinesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSplinesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSplinesSplineParserRuleCall_1_1_0 = (RuleCall)cSplinesAssignment_1_1.eContents().get(0);
		
		//SplineType:
		//	splines+=Spline (";" splines+=Spline)*;
		public ParserRule getRule() { return rule; }

		//splines+=Spline (";" splines+=Spline)*
		public Group getGroup() { return cGroup; }

		//splines+=Spline
		public Assignment getSplinesAssignment_0() { return cSplinesAssignment_0; }

		//Spline
		public RuleCall getSplinesSplineParserRuleCall_0_0() { return cSplinesSplineParserRuleCall_0_0; }

		//(";" splines+=Spline)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//splines+=Spline
		public Assignment getSplinesAssignment_1_1() { return cSplinesAssignment_1_1; }

		//Spline
		public RuleCall getSplinesSplineParserRuleCall_1_1_0() { return cSplinesSplineParserRuleCall_1_1_0; }
	}

	public class SplineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStartpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStartpPointParserRuleCall_0_2_0 = (RuleCall)cStartpAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEndpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndpPointParserRuleCall_1_2_0 = (RuleCall)cEndpAssignment_1_2.eContents().get(0);
		private final Assignment cControlPointsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControlPointsPointParserRuleCall_2_0 = (RuleCall)cControlPointsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cControlPointsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cControlPointsPointParserRuleCall_3_0_0 = (RuleCall)cControlPointsAssignment_3_0.eContents().get(0);
		private final Assignment cControlPointsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cControlPointsPointParserRuleCall_3_1_0 = (RuleCall)cControlPointsAssignment_3_1.eContents().get(0);
		private final Assignment cControlPointsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cControlPointsPointParserRuleCall_3_2_0 = (RuleCall)cControlPointsAssignment_3_2.eContents().get(0);
		
		//Spline:
		//	("s" "," startp=Point)? ("e" "," endp=Point)? controlPoints+=Point (controlPoints+=Point controlPoints+=Point
		//	controlPoints+=Point)+;
		public ParserRule getRule() { return rule; }

		//("s" "," startp=Point)? ("e" "," endp=Point)? controlPoints+=Point (controlPoints+=Point controlPoints+=Point
		//controlPoints+=Point)+
		public Group getGroup() { return cGroup; }

		//("s" "," startp=Point)?
		public Group getGroup_0() { return cGroup_0; }

		//"s"
		public Keyword getSKeyword_0_0() { return cSKeyword_0_0; }

		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//startp=Point
		public Assignment getStartpAssignment_0_2() { return cStartpAssignment_0_2; }

		//Point
		public RuleCall getStartpPointParserRuleCall_0_2_0() { return cStartpPointParserRuleCall_0_2_0; }

		//("e" "," endp=Point)?
		public Group getGroup_1() { return cGroup_1; }

		//"e"
		public Keyword getEKeyword_1_0() { return cEKeyword_1_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//endp=Point
		public Assignment getEndpAssignment_1_2() { return cEndpAssignment_1_2; }

		//Point
		public RuleCall getEndpPointParserRuleCall_1_2_0() { return cEndpPointParserRuleCall_1_2_0; }

		//controlPoints+=Point
		public Assignment getControlPointsAssignment_2() { return cControlPointsAssignment_2; }

		//Point
		public RuleCall getControlPointsPointParserRuleCall_2_0() { return cControlPointsPointParserRuleCall_2_0; }

		//(controlPoints+=Point controlPoints+=Point controlPoints+=Point)+
		public Group getGroup_3() { return cGroup_3; }

		//controlPoints+=Point
		public Assignment getControlPointsAssignment_3_0() { return cControlPointsAssignment_3_0; }

		//Point
		public RuleCall getControlPointsPointParserRuleCall_3_0_0() { return cControlPointsPointParserRuleCall_3_0_0; }

		//controlPoints+=Point
		public Assignment getControlPointsAssignment_3_1() { return cControlPointsAssignment_3_1; }

		//Point
		public RuleCall getControlPointsPointParserRuleCall_3_1_0() { return cControlPointsPointParserRuleCall_3_1_0; }

		//controlPoints+=Point
		public Assignment getControlPointsAssignment_3_2() { return cControlPointsAssignment_3_2; }

		//Point
		public RuleCall getControlPointsPointParserRuleCall_3_2_0() { return cControlPointsPointParserRuleCall_3_2_0; }
	}
	
	
	private final SplineTypeElements pSplineType;
	private final SplineElements pSpline;
	
	private final Grammar grammar;

	private final DotPointGrammarAccess gaDotPoint;

	@Inject
	public DotSplineTypeGrammarAccess(GrammarProvider grammarProvider,
		DotPointGrammarAccess gaDotPoint) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDotPoint = gaDotPoint;
		this.pSplineType = new SplineTypeElements();
		this.pSpline = new SplineElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gef.dot.internal.language.DotSplineType".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public DotPointGrammarAccess getDotPointGrammarAccess() {
		return gaDotPoint;
	}

	
	//SplineType:
	//	splines+=Spline (";" splines+=Spline)*;
	public SplineTypeElements getSplineTypeAccess() {
		return pSplineType;
	}
	
	public ParserRule getSplineTypeRule() {
		return getSplineTypeAccess().getRule();
	}

	//Spline:
	//	("s" "," startp=Point)? ("e" "," endp=Point)? controlPoints+=Point (controlPoints+=Point controlPoints+=Point
	//	controlPoints+=Point)+;
	public SplineElements getSplineAccess() {
		return pSpline;
	}
	
	public ParserRule getSplineRule() {
		return getSplineAccess().getRule();
	}

	//Point:
	//	x=DOUBLE "," y=DOUBLE ("," z=DOUBLE)? inputOnly?="!"?;
	public DotPointGrammarAccess.PointElements getPointAccess() {
		return gaDotPoint.getPointAccess();
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}

	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? ("." "0".."9"+ | "0".."9"+ ("." "0".."9"*)?);
	public TerminalRule getDOUBLERule() {
		return gaDotPoint.getDOUBLERule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaDotPoint.getWSRule();
	} 
}
