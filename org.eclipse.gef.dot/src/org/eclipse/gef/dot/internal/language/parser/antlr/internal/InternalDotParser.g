/*
* generated by Xtext
*/
parser grammar InternalDotParser;

options {
	tokenVocab=InternalDotLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gef.dot.internal.language.services.DotGrammarAccess;

}

@members {


	private DotGrammarAccess grammarAccess;
	 	
	public InternalDotParser(TokenStream input, DotGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "DotAst";	
	} 
	   	   	
	@Override
	protected DotGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleDotAst
entryRuleDotAst returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDotAstRule()); }
	 iv_ruleDotAst=ruleDotAst 
	 { $current=$iv_ruleDotAst.current; } 
	 EOF 
;

// Rule DotAst
ruleDotAst returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDotAstAccess().getGraphsDotGraphParserRuleCall_0()); 
	    }
		lv_graphs_0_0=ruleDotGraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotAstRule());
	        }
       		add(
       			$current, 
       			"graphs",
        		lv_graphs_0_0, 
        		"DotGraph");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDotGraph
entryRuleDotGraph returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDotGraphRule()); }
	 iv_ruleDotGraph=ruleDotGraph 
	 { $current=$iv_ruleDotGraph.current; } 
	 EOF 
;

// Rule DotGraph
ruleDotGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_strict_0_0=
	Strict
    {
        newLeafNode(lv_strict_0_0, grammarAccess.getDotGraphAccess().getStrictStrictKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDotGraphRule());
	        }
       		setWithLastConsumed($current, "strict", true, "strict");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDotGraphAccess().getTypeGraphTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleGraphType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotGraphRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"GraphType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDotGraphAccess().getNameIDParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotGraphRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=LeftCurlyBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getDotGraphAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDotGraphAccess().getStmtsStmtParserRuleCall_4_0()); 
	    }
		lv_stmts_4_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotGraphRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_4_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=RightCurlyBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getDotGraphAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	 iv_ruleStmt=ruleStmt 
	 { $current=$iv_ruleStmt.current; } 
	 EOF 
;

// Rule Stmt
ruleStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getNodeStmtParserRuleCall_0_0()); 
    }
    this_NodeStmt_0=ruleNodeStmt
    {
        $current = $this_NodeStmt_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getEdgeStmtNodeParserRuleCall_0_1()); 
    }
    this_EdgeStmtNode_1=ruleEdgeStmtNode
    {
        $current = $this_EdgeStmtNode_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getAttrStmtParserRuleCall_0_2()); 
    }
    this_AttrStmt_2=ruleAttrStmt
    {
        $current = $this_AttrStmt_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getAttributeParserRuleCall_0_3()); 
    }
    this_Attribute_3=ruleAttribute
    {
        $current = $this_Attribute_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getSubgraphOrEdgeStmtSubgraphParserRuleCall_0_4()); 
    }
    this_SubgraphOrEdgeStmtSubgraph_4=ruleSubgraphOrEdgeStmtSubgraph
    {
        $current = $this_SubgraphOrEdgeStmtSubgraph_4.current;
        afterParserOrEnumRuleCall();
    }
)(
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getStmtAccess().getSemicolonKeyword_1());
    }
)?)
;





// Entry rule entryRuleEdgeStmtNode
entryRuleEdgeStmtNode returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEdgeStmtNodeRule()); }
	 iv_ruleEdgeStmtNode=ruleEdgeStmtNode 
	 { $current=$iv_ruleEdgeStmtNode.current; } 
	 EOF 
;

// Rule EdgeStmtNode
ruleEdgeStmtNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeStmtNodeAccess().getNodeNodeIdParserRuleCall_0_0()); 
	    }
		lv_node_0_0=ruleNodeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeStmtNodeRule());
	        }
       		set(
       			$current, 
       			"node",
        		lv_node_0_0, 
        		"NodeId");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSEdgeRhsParserRuleCall_1_0()); 
	    }
		lv_edgeRHS_1_0=ruleEdgeRhs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeStmtNodeRule());
	        }
       		add(
       			$current, 
       			"edgeRHS",
        		lv_edgeRHS_1_0, 
        		"EdgeRhs");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeStmtNodeAccess().getAttrListsAttrListParserRuleCall_2_0()); 
	    }
		lv_attrLists_2_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeStmtNodeRule());
	        }
       		add(
       			$current, 
       			"attrLists",
        		lv_attrLists_2_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;







// Entry rule entryRuleNodeStmt
entryRuleNodeStmt returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNodeStmtRule()); }
	 iv_ruleNodeStmt=ruleNodeStmt 
	 { $current=$iv_ruleNodeStmt.current; } 
	 EOF 
;

// Rule NodeStmt
ruleNodeStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeStmtAccess().getNodeNodeIdParserRuleCall_0_0()); 
	    }
		lv_node_0_0=ruleNodeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeStmtRule());
	        }
       		set(
       			$current, 
       			"node",
        		lv_node_0_0, 
        		"NodeId");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeStmtAccess().getAttrListsAttrListParserRuleCall_1_0()); 
	    }
		lv_attrLists_1_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeStmtRule());
	        }
       		add(
       			$current, 
       			"attrLists",
        		lv_attrLists_1_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAttrStmt
entryRuleAttrStmt returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttrStmtRule()); }
	 iv_ruleAttrStmt=ruleAttrStmt 
	 { $current=$iv_ruleAttrStmt.current; } 
	 EOF 
;

// Rule AttrStmt
ruleAttrStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrStmtAccess().getTypeAttributeTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrStmtRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"AttributeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrStmtAccess().getAttrListsAttrListParserRuleCall_1_0()); 
	    }
		lv_attrLists_1_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrStmtRule());
	        }
       		add(
       			$current, 
       			"attrLists",
        		lv_attrLists_1_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleAttrList
entryRuleAttrList returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttrListRule()); }
	 iv_ruleAttrList=ruleAttrList 
	 { $current=$iv_ruleAttrList.current; } 
	 EOF 
;

// Rule AttrList
ruleAttrList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttrListAccess().getAttrListAction_0(),
            $current);
    }
)
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttrListAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrListAccess().getAttributesAttributeParserRuleCall_2_0_0()); 
	    }
		lv_attributes_2_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrListRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttrListAccess().getCommaKeyword_2_1_0());
    }

    |
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttrListAccess().getSemicolonKeyword_2_1_1());
    }
)?)*
	otherlv_5=RightSquareBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttrListAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getNameIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=EqualsSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getValueIDParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSubgraphOrEdgeStmtSubgraph
entryRuleSubgraphOrEdgeStmtSubgraph returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubgraphOrEdgeStmtSubgraphRule()); }
	 iv_ruleSubgraphOrEdgeStmtSubgraph=ruleSubgraphOrEdgeStmtSubgraph 
	 { $current=$iv_ruleSubgraphOrEdgeStmtSubgraph.current; } 
	 EOF 
;

// Rule SubgraphOrEdgeStmtSubgraph
ruleSubgraphOrEdgeStmtSubgraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getSubgraphParserRuleCall_0()); 
    }
    this_Subgraph_0=ruleSubgraph
    {
        $current = $this_Subgraph_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeStmtSubgraphSubgraphAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeRHSEdgeRhsParserRuleCall_1_1_0()); 
	    }
		lv_edgeRHS_2_0=ruleEdgeRhs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubgraphOrEdgeStmtSubgraphRule());
	        }
       		add(
       			$current, 
       			"edgeRHS",
        		lv_edgeRHS_2_0, 
        		"EdgeRhs");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getAttrListsAttrListParserRuleCall_1_2_0()); 
	    }
		lv_attrLists_3_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubgraphOrEdgeStmtSubgraphRule());
	        }
       		add(
       			$current, 
       			"attrLists",
        		lv_attrLists_3_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleSubgraph
entryRuleSubgraph returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubgraphRule()); }
	 iv_ruleSubgraph=ruleSubgraph 
	 { $current=$iv_ruleSubgraph.current; } 
	 EOF 
;

// Rule Subgraph
ruleSubgraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubgraphAccess().getSubgraphAction_0(),
            $current);
    }
)(
	otherlv_1=Subgraph
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubgraphAccess().getSubgraphKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubgraphAccess().getNameIDParserRuleCall_1_1_0()); 
	    }
		lv_name_2_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubgraphRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)?)?
	otherlv_3=LeftCurlyBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getSubgraphAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubgraphAccess().getStmtsStmtParserRuleCall_3_0()); 
	    }
		lv_stmts_4_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubgraphRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_4_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=RightCurlyBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getSubgraphAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulePort
entryRulePort returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPortRule()); }
	 iv_rulePort=rulePort 
	 { $current=$iv_rulePort.current; } 
	 EOF 
;

// Rule Port
rulePort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
Colon
)=>
	otherlv_0=Colon
    {
    	newLeafNode(otherlv_0, grammarAccess.getPortAccess().getColonKeyword_0_0());
    }
)(
(
		lv_compass_pt_1_0=RULE_COMPASS_PT
		{
			newLeafNode(lv_compass_pt_1_0, grammarAccess.getPortAccess().getCompass_ptCOMPASS_PTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"compass_pt",
        		lv_compass_pt_1_0, 
        		"COMPASS_PT");
	    }

)
))
    |(
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getPortAccess().getColonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPortAccess().getNameIDParserRuleCall_1_1_0()); 
	    }
		lv_name_3_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPortRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Colon
    {
    	newLeafNode(otherlv_4, grammarAccess.getPortAccess().getColonKeyword_1_2_0());
    }
(
(
		lv_compass_pt_5_0=RULE_COMPASS_PT
		{
			newLeafNode(lv_compass_pt_5_0, grammarAccess.getPortAccess().getCompass_ptCOMPASS_PTTerminalRuleCall_1_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"compass_pt",
        		lv_compass_pt_5_0, 
        		"COMPASS_PT");
	    }

)
))?))
;





// Entry rule entryRuleEdgeRhs
entryRuleEdgeRhs returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEdgeRhsRule()); }
	 iv_ruleEdgeRhs=ruleEdgeRhs 
	 { $current=$iv_ruleEdgeRhs.current; } 
	 EOF 
;

// Rule EdgeRhs
ruleEdgeRhs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEdgeRhsAccess().getEdgeRhsNodeParserRuleCall_0()); 
    }
    this_EdgeRhsNode_0=ruleEdgeRhsNode
    {
        $current = $this_EdgeRhsNode_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEdgeRhsAccess().getEdgeRhsSubgraphParserRuleCall_1()); 
    }
    this_EdgeRhsSubgraph_1=ruleEdgeRhsSubgraph
    {
        $current = $this_EdgeRhsSubgraph_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEdgeRhsNode
entryRuleEdgeRhsNode returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEdgeRhsNodeRule()); }
	 iv_ruleEdgeRhsNode=ruleEdgeRhsNode 
	 { $current=$iv_ruleEdgeRhsNode.current; } 
	 EOF 
;

// Rule EdgeRhsNode
ruleEdgeRhsNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeRhsNodeAccess().getOpEdgeOpEnumRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleEdgeOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRhsNodeRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"EdgeOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeRhsNodeAccess().getNodeNodeIdParserRuleCall_1_0()); 
	    }
		lv_node_1_0=ruleNodeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRhsNodeRule());
	        }
       		set(
       			$current, 
       			"node",
        		lv_node_1_0, 
        		"NodeId");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEdgeRhsSubgraph
entryRuleEdgeRhsSubgraph returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEdgeRhsSubgraphRule()); }
	 iv_ruleEdgeRhsSubgraph=ruleEdgeRhsSubgraph 
	 { $current=$iv_ruleEdgeRhsSubgraph.current; } 
	 EOF 
;

// Rule EdgeRhsSubgraph
ruleEdgeRhsSubgraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeRhsSubgraphAccess().getOpEdgeOpEnumRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleEdgeOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRhsSubgraphRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"EdgeOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphSubgraphParserRuleCall_1_0()); 
	    }
		lv_subgraph_1_0=ruleSubgraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRhsSubgraphRule());
	        }
       		set(
       			$current, 
       			"subgraph",
        		lv_subgraph_1_0, 
        		"Subgraph");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNodeId
entryRuleNodeId returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNodeIdRule()); }
	 iv_ruleNodeId=ruleNodeId 
	 { $current=$iv_ruleNodeId.current; } 
	 EOF 
;

// Rule NodeId
ruleNodeId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeIdAccess().getNameIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeIdRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeIdAccess().getPortPortParserRuleCall_1_0()); 
	    }
		lv_port_1_0=rulePort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeIdRule());
	        }
       		set(
       			$current, 
       			"port",
        		lv_port_1_0, 
        		"Port");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleID
entryRuleID returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getIDRule()); } 
	 iv_ruleID=ruleID 
	 { $current=$iv_ruleID.current.getText(); }  
	 EOF 
;

// Rule ID
ruleID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_NUMERAL_0=RULE_NUMERAL    {
		$current.merge(this_NUMERAL_0);
    }

    { 
    newLeafNode(this_NUMERAL_0, grammarAccess.getIDAccess().getNUMERALTerminalRuleCall_0()); 
    }

    |    this_COMPASS_PT_1=RULE_COMPASS_PT    {
		$current.merge(this_COMPASS_PT_1);
    }

    { 
    newLeafNode(this_COMPASS_PT_1, grammarAccess.getIDAccess().getCOMPASS_PTTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getIDAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |    this_QUOTED_STRING_3=RULE_QUOTED_STRING    {
		$current.merge(this_QUOTED_STRING_3);
    }

    { 
    newLeafNode(this_QUOTED_STRING_3, grammarAccess.getIDAccess().getQUOTED_STRINGTerminalRuleCall_3()); 
    }

    |    this_HTML_STRING_4=RULE_HTML_STRING    {
		$current.merge(this_HTML_STRING_4);
    }

    { 
    newLeafNode(this_HTML_STRING_4, grammarAccess.getIDAccess().getHTML_STRINGTerminalRuleCall_4()); 
    }
)
    ;





// Rule EdgeOp
ruleEdgeOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=HyphenMinusGreaterThanSign
    {
        $current = grammarAccess.getEdgeOpAccess().getDirectedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEdgeOpAccess().getDirectedEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=HyphenMinusHyphenMinus
    {
        $current = grammarAccess.getEdgeOpAccess().getUndirectedEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEdgeOpAccess().getUndirectedEnumLiteralDeclaration_1()); 
    }
));



// Rule GraphType
ruleGraphType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=Graph
    {
        $current = grammarAccess.getGraphTypeAccess().getGraphEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGraphTypeAccess().getGraphEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Digraph
    {
        $current = grammarAccess.getGraphTypeAccess().getDigraphEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGraphTypeAccess().getDigraphEnumLiteralDeclaration_1()); 
    }
));



// Rule AttributeType
ruleAttributeType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=Graph
    {
        $current = grammarAccess.getAttributeTypeAccess().getGraphEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAttributeTypeAccess().getGraphEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Node
    {
        $current = grammarAccess.getAttributeTypeAccess().getNodeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAttributeTypeAccess().getNodeEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=Edge
    {
        $current = grammarAccess.getAttributeTypeAccess().getEdgeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAttributeTypeAccess().getEdgeEnumLiteralDeclaration_2()); 
    }
));



