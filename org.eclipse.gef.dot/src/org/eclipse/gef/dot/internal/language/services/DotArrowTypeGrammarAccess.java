/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DotArrowTypeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ArrowTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrowType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArrowShapesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArrowShapesAbstractArrowShapeParserRuleCall_0_0 = (RuleCall)cArrowShapesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArrowShapesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArrowShapesAbstractArrowShapeParserRuleCall_1_0_0 = (RuleCall)cArrowShapesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cArrowShapesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cArrowShapesAbstractArrowShapeParserRuleCall_1_1_0_0 = (RuleCall)cArrowShapesAssignment_1_1_0.eContents().get(0);
		private final Assignment cArrowShapesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArrowShapesAbstractArrowShapeParserRuleCall_1_1_1_0 = (RuleCall)cArrowShapesAssignment_1_1_1.eContents().get(0);
		
		//ArrowType:
		//	arrowShapes+=AbstractArrowShape (arrowShapes+=AbstractArrowShape (arrowShapes+=AbstractArrowShape
		//	arrowShapes+=AbstractArrowShape?)?)?;
		public ParserRule getRule() { return rule; }

		//arrowShapes+=AbstractArrowShape (arrowShapes+=AbstractArrowShape (arrowShapes+=AbstractArrowShape
		//arrowShapes+=AbstractArrowShape?)?)?
		public Group getGroup() { return cGroup; }

		//arrowShapes+=AbstractArrowShape
		public Assignment getArrowShapesAssignment_0() { return cArrowShapesAssignment_0; }

		//AbstractArrowShape
		public RuleCall getArrowShapesAbstractArrowShapeParserRuleCall_0_0() { return cArrowShapesAbstractArrowShapeParserRuleCall_0_0; }

		//(arrowShapes+=AbstractArrowShape (arrowShapes+=AbstractArrowShape arrowShapes+=AbstractArrowShape?)?)?
		public Group getGroup_1() { return cGroup_1; }

		//arrowShapes+=AbstractArrowShape
		public Assignment getArrowShapesAssignment_1_0() { return cArrowShapesAssignment_1_0; }

		//AbstractArrowShape
		public RuleCall getArrowShapesAbstractArrowShapeParserRuleCall_1_0_0() { return cArrowShapesAbstractArrowShapeParserRuleCall_1_0_0; }

		//(arrowShapes+=AbstractArrowShape arrowShapes+=AbstractArrowShape?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//arrowShapes+=AbstractArrowShape
		public Assignment getArrowShapesAssignment_1_1_0() { return cArrowShapesAssignment_1_1_0; }

		//AbstractArrowShape
		public RuleCall getArrowShapesAbstractArrowShapeParserRuleCall_1_1_0_0() { return cArrowShapesAbstractArrowShapeParserRuleCall_1_1_0_0; }

		//arrowShapes+=AbstractArrowShape?
		public Assignment getArrowShapesAssignment_1_1_1() { return cArrowShapesAssignment_1_1_1; }

		//AbstractArrowShape
		public RuleCall getArrowShapesAbstractArrowShapeParserRuleCall_1_1_1_0() { return cArrowShapesAbstractArrowShapeParserRuleCall_1_1_1_0; }
	}

	public class AbstractArrowShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractArrowShape");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrowShapeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeprecatedArrowShapeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractArrowShape:
		//	ArrowShape | DeprecatedArrowShape;
		public ParserRule getRule() { return rule; }

		//ArrowShape | DeprecatedArrowShape
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArrowShape
		public RuleCall getArrowShapeParserRuleCall_0() { return cArrowShapeParserRuleCall_0; }

		//DeprecatedArrowShape
		public RuleCall getDeprecatedArrowShapeParserRuleCall_1() { return cDeprecatedArrowShapeParserRuleCall_1; }
	}

	public class ArrowShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrowShape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpenOKeyword_0_0 = (Keyword)cOpenAssignment_0.eContents().get(0);
		private final Assignment cSideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSideAlternatives_1_0 = (Alternatives)cSideAssignment_1.eContents().get(0);
		private final Keyword cSideLKeyword_1_0_0 = (Keyword)cSideAlternatives_1_0.eContents().get(0);
		private final Keyword cSideRKeyword_1_0_1 = (Keyword)cSideAlternatives_1_0.eContents().get(1);
		private final Assignment cShapeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cShapePrimitiveShapeEnumRuleCall_2_0 = (RuleCall)cShapeAssignment_2.eContents().get(0);
		
		//ArrowShape:
		//	open?="o"? side=("l" | "r")? shape=PrimitiveShape;
		public ParserRule getRule() { return rule; }

		//open?="o"? side=("l" | "r")? shape=PrimitiveShape
		public Group getGroup() { return cGroup; }

		//open?="o"?
		public Assignment getOpenAssignment_0() { return cOpenAssignment_0; }

		//"o"
		public Keyword getOpenOKeyword_0_0() { return cOpenOKeyword_0_0; }

		//side=("l" | "r")?
		public Assignment getSideAssignment_1() { return cSideAssignment_1; }

		//"l" | "r"
		public Alternatives getSideAlternatives_1_0() { return cSideAlternatives_1_0; }

		//"l"
		public Keyword getSideLKeyword_1_0_0() { return cSideLKeyword_1_0_0; }

		//"r"
		public Keyword getSideRKeyword_1_0_1() { return cSideRKeyword_1_0_1; }

		//shape=PrimitiveShape
		public Assignment getShapeAssignment_2() { return cShapeAssignment_2; }

		//PrimitiveShape
		public RuleCall getShapePrimitiveShapeEnumRuleCall_2_0() { return cShapePrimitiveShapeEnumRuleCall_2_0; }
	}

	public class DeprecatedArrowShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeprecatedArrowShape");
		private final Assignment cShapeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cShapeDeprecatedShapeEnumRuleCall_0 = (RuleCall)cShapeAssignment.eContents().get(0);
		
		//DeprecatedArrowShape:
		//	shape=DeprecatedShape;
		public ParserRule getRule() { return rule; }

		//shape=DeprecatedShape
		public Assignment getShapeAssignment() { return cShapeAssignment; }

		//DeprecatedShape
		public RuleCall getShapeDeprecatedShapeEnumRuleCall_0() { return cShapeDeprecatedShapeEnumRuleCall_0; }
	}
	
	
	public class DeprecatedShapeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DeprecatedShape");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEdiamondEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEdiamondEdiamondKeyword_0_0 = (Keyword)cEdiamondEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOpenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOpenOpenKeyword_1_0 = (Keyword)cOpenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHalfopenEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHalfopenHalfopenKeyword_2_0 = (Keyword)cHalfopenEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEmptyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEmptyEmptyKeyword_3_0 = (Keyword)cEmptyEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cInvemptyEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cInvemptyInvemptyKeyword_4_0 = (Keyword)cInvemptyEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum DeprecatedShape:
		//	ediamond | open | halfopen | empty | invempty;
		public EnumRule getRule() { return rule; }

		//ediamond | open | halfopen | empty | invempty
		public Alternatives getAlternatives() { return cAlternatives; }

		//ediamond
		public EnumLiteralDeclaration getEdiamondEnumLiteralDeclaration_0() { return cEdiamondEnumLiteralDeclaration_0; }

		//"ediamond"
		public Keyword getEdiamondEdiamondKeyword_0_0() { return cEdiamondEdiamondKeyword_0_0; }

		//open
		public EnumLiteralDeclaration getOpenEnumLiteralDeclaration_1() { return cOpenEnumLiteralDeclaration_1; }

		//"open"
		public Keyword getOpenOpenKeyword_1_0() { return cOpenOpenKeyword_1_0; }

		//halfopen
		public EnumLiteralDeclaration getHalfopenEnumLiteralDeclaration_2() { return cHalfopenEnumLiteralDeclaration_2; }

		//"halfopen"
		public Keyword getHalfopenHalfopenKeyword_2_0() { return cHalfopenHalfopenKeyword_2_0; }

		//empty
		public EnumLiteralDeclaration getEmptyEnumLiteralDeclaration_3() { return cEmptyEnumLiteralDeclaration_3; }

		//"empty"
		public Keyword getEmptyEmptyKeyword_3_0() { return cEmptyEmptyKeyword_3_0; }

		//invempty
		public EnumLiteralDeclaration getInvemptyEnumLiteralDeclaration_4() { return cInvemptyEnumLiteralDeclaration_4; }

		//"invempty"
		public Keyword getInvemptyInvemptyKeyword_4_0() { return cInvemptyInvemptyKeyword_4_0; }
	}

	public class PrimitiveShapeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveShape");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBoxEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBoxBoxKeyword_0_0 = (Keyword)cBoxEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCrowEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCrowCrowKeyword_1_0 = (Keyword)cCrowEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCurveEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCurveCurveKeyword_2_0 = (Keyword)cCurveEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIcurveEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIcurveIcurveKeyword_3_0 = (Keyword)cIcurveEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDiamondEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDiamondDiamondKeyword_4_0 = (Keyword)cDiamondEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDotEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDotDotKeyword_5_0 = (Keyword)cDotEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cInvEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cInvInvKeyword_6_0 = (Keyword)cInvEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNoneNoneKeyword_7_0 = (Keyword)cNoneEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNormalEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNormalNormalKeyword_8_0 = (Keyword)cNormalEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTeeEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTeeTeeKeyword_9_0 = (Keyword)cTeeEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cVeeEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cVeeVeeKeyword_10_0 = (Keyword)cVeeEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum PrimitiveShape:
		//	box | crow | curve | icurve | diamond | dot | inv | none | normal | tee | vee;
		public EnumRule getRule() { return rule; }

		//box | crow | curve | icurve | diamond | dot | inv | none | normal | tee | vee
		public Alternatives getAlternatives() { return cAlternatives; }

		//box
		public EnumLiteralDeclaration getBoxEnumLiteralDeclaration_0() { return cBoxEnumLiteralDeclaration_0; }

		//"box"
		public Keyword getBoxBoxKeyword_0_0() { return cBoxBoxKeyword_0_0; }

		//crow
		public EnumLiteralDeclaration getCrowEnumLiteralDeclaration_1() { return cCrowEnumLiteralDeclaration_1; }

		//"crow"
		public Keyword getCrowCrowKeyword_1_0() { return cCrowCrowKeyword_1_0; }

		//curve
		public EnumLiteralDeclaration getCurveEnumLiteralDeclaration_2() { return cCurveEnumLiteralDeclaration_2; }

		//"curve"
		public Keyword getCurveCurveKeyword_2_0() { return cCurveCurveKeyword_2_0; }

		//icurve
		public EnumLiteralDeclaration getIcurveEnumLiteralDeclaration_3() { return cIcurveEnumLiteralDeclaration_3; }

		//"icurve"
		public Keyword getIcurveIcurveKeyword_3_0() { return cIcurveIcurveKeyword_3_0; }

		//diamond
		public EnumLiteralDeclaration getDiamondEnumLiteralDeclaration_4() { return cDiamondEnumLiteralDeclaration_4; }

		//"diamond"
		public Keyword getDiamondDiamondKeyword_4_0() { return cDiamondDiamondKeyword_4_0; }

		//dot
		public EnumLiteralDeclaration getDotEnumLiteralDeclaration_5() { return cDotEnumLiteralDeclaration_5; }

		//"dot"
		public Keyword getDotDotKeyword_5_0() { return cDotDotKeyword_5_0; }

		//inv
		public EnumLiteralDeclaration getInvEnumLiteralDeclaration_6() { return cInvEnumLiteralDeclaration_6; }

		//"inv"
		public Keyword getInvInvKeyword_6_0() { return cInvInvKeyword_6_0; }

		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_7() { return cNoneEnumLiteralDeclaration_7; }

		//"none"
		public Keyword getNoneNoneKeyword_7_0() { return cNoneNoneKeyword_7_0; }

		//normal
		public EnumLiteralDeclaration getNormalEnumLiteralDeclaration_8() { return cNormalEnumLiteralDeclaration_8; }

		//"normal"
		public Keyword getNormalNormalKeyword_8_0() { return cNormalNormalKeyword_8_0; }

		//tee
		public EnumLiteralDeclaration getTeeEnumLiteralDeclaration_9() { return cTeeEnumLiteralDeclaration_9; }

		//"tee"
		public Keyword getTeeTeeKeyword_9_0() { return cTeeTeeKeyword_9_0; }

		//vee
		public EnumLiteralDeclaration getVeeEnumLiteralDeclaration_10() { return cVeeEnumLiteralDeclaration_10; }

		//"vee"
		public Keyword getVeeVeeKeyword_10_0() { return cVeeVeeKeyword_10_0; }
	}
	
	private final ArrowTypeElements pArrowType;
	private final AbstractArrowShapeElements pAbstractArrowShape;
	private final ArrowShapeElements pArrowShape;
	private final DeprecatedArrowShapeElements pDeprecatedArrowShape;
	private final DeprecatedShapeElements unknownRuleDeprecatedShape;
	private final PrimitiveShapeElements unknownRulePrimitiveShape;
	
	private final Grammar grammar;

	@Inject
	public DotArrowTypeGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pArrowType = new ArrowTypeElements();
		this.pAbstractArrowShape = new AbstractArrowShapeElements();
		this.pArrowShape = new ArrowShapeElements();
		this.pDeprecatedArrowShape = new DeprecatedArrowShapeElements();
		this.unknownRuleDeprecatedShape = new DeprecatedShapeElements();
		this.unknownRulePrimitiveShape = new PrimitiveShapeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gef.dot.internal.language.DotArrowType".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//ArrowType:
	//	arrowShapes+=AbstractArrowShape (arrowShapes+=AbstractArrowShape (arrowShapes+=AbstractArrowShape
	//	arrowShapes+=AbstractArrowShape?)?)?;
	public ArrowTypeElements getArrowTypeAccess() {
		return pArrowType;
	}
	
	public ParserRule getArrowTypeRule() {
		return getArrowTypeAccess().getRule();
	}

	//AbstractArrowShape:
	//	ArrowShape | DeprecatedArrowShape;
	public AbstractArrowShapeElements getAbstractArrowShapeAccess() {
		return pAbstractArrowShape;
	}
	
	public ParserRule getAbstractArrowShapeRule() {
		return getAbstractArrowShapeAccess().getRule();
	}

	//ArrowShape:
	//	open?="o"? side=("l" | "r")? shape=PrimitiveShape;
	public ArrowShapeElements getArrowShapeAccess() {
		return pArrowShape;
	}
	
	public ParserRule getArrowShapeRule() {
		return getArrowShapeAccess().getRule();
	}

	//DeprecatedArrowShape:
	//	shape=DeprecatedShape;
	public DeprecatedArrowShapeElements getDeprecatedArrowShapeAccess() {
		return pDeprecatedArrowShape;
	}
	
	public ParserRule getDeprecatedArrowShapeRule() {
		return getDeprecatedArrowShapeAccess().getRule();
	}

	//enum DeprecatedShape:
	//	ediamond | open | halfopen | empty | invempty;
	public DeprecatedShapeElements getDeprecatedShapeAccess() {
		return unknownRuleDeprecatedShape;
	}
	
	public EnumRule getDeprecatedShapeRule() {
		return getDeprecatedShapeAccess().getRule();
	}

	//enum PrimitiveShape:
	//	box | crow | curve | icurve | diamond | dot | inv | none | normal | tee | vee;
	public PrimitiveShapeElements getPrimitiveShapeAccess() {
		return unknownRulePrimitiveShape;
	}
	
	public EnumRule getPrimitiveShapeRule() {
		return getPrimitiveShapeAccess().getRule();
	}
}
