/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DotRectGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLlxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLlxDOUBLETerminalRuleCall_0_0 = (RuleCall)cLlxAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLlyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLlyDOUBLETerminalRuleCall_2_0 = (RuleCall)cLlyAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUrxAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUrxDOUBLETerminalRuleCall_4_0 = (RuleCall)cUrxAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUryDOUBLETerminalRuleCall_6_0 = (RuleCall)cUryAssignment_6.eContents().get(0);
		
		//Rect:
		//	llx=DOUBLE "," lly=DOUBLE "," urx=DOUBLE "," ury=DOUBLE;
		public ParserRule getRule() { return rule; }

		//llx=DOUBLE "," lly=DOUBLE "," urx=DOUBLE "," ury=DOUBLE
		public Group getGroup() { return cGroup; }

		//llx=DOUBLE
		public Assignment getLlxAssignment_0() { return cLlxAssignment_0; }

		//DOUBLE
		public RuleCall getLlxDOUBLETerminalRuleCall_0_0() { return cLlxDOUBLETerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//lly=DOUBLE
		public Assignment getLlyAssignment_2() { return cLlyAssignment_2; }

		//DOUBLE
		public RuleCall getLlyDOUBLETerminalRuleCall_2_0() { return cLlyDOUBLETerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//urx=DOUBLE
		public Assignment getUrxAssignment_4() { return cUrxAssignment_4; }

		//DOUBLE
		public RuleCall getUrxDOUBLETerminalRuleCall_4_0() { return cUrxDOUBLETerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//ury=DOUBLE
		public Assignment getUryAssignment_6() { return cUryAssignment_6; }

		//DOUBLE
		public RuleCall getUryDOUBLETerminalRuleCall_6_0() { return cUryDOUBLETerminalRuleCall_6_0; }
	}
	
	
	private final RectElements pRect;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DotRectGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pRect = new RectElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gef.dot.internal.language.DotRect".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Rect:
	//	llx=DOUBLE "," lly=DOUBLE "," urx=DOUBLE "," ury=DOUBLE;
	public RectElements getRectAccess() {
		return pRect;
	}
	
	public ParserRule getRectRule() {
		return getRectAccess().getRule();
	}

	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? ("." "0".."9"+ | "0".."9"+ ("." "0".."9"*)?);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 
}
