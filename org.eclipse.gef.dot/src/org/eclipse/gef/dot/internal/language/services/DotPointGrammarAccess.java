/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DotPointGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXDOUBLETerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYDOUBLETerminalRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cZAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cZDOUBLETerminalRuleCall_3_1_0 = (RuleCall)cZAssignment_3_1.eContents().get(0);
		private final Assignment cInputOnlyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cInputOnlyExclamationMarkKeyword_4_0 = (Keyword)cInputOnlyAssignment_4.eContents().get(0);
		
		//Point:
		//	x=DOUBLE "," y=DOUBLE ("," z=DOUBLE)? inputOnly?="!"?;
		public ParserRule getRule() { return rule; }

		//x=DOUBLE "," y=DOUBLE ("," z=DOUBLE)? inputOnly?="!"?
		public Group getGroup() { return cGroup; }

		//x=DOUBLE
		public Assignment getXAssignment_0() { return cXAssignment_0; }

		//DOUBLE
		public RuleCall getXDOUBLETerminalRuleCall_0_0() { return cXDOUBLETerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//y=DOUBLE
		public Assignment getYAssignment_2() { return cYAssignment_2; }

		//DOUBLE
		public RuleCall getYDOUBLETerminalRuleCall_2_0() { return cYDOUBLETerminalRuleCall_2_0; }

		//("," z=DOUBLE)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//z=DOUBLE
		public Assignment getZAssignment_3_1() { return cZAssignment_3_1; }

		//DOUBLE
		public RuleCall getZDOUBLETerminalRuleCall_3_1_0() { return cZDOUBLETerminalRuleCall_3_1_0; }

		//inputOnly?="!"?
		public Assignment getInputOnlyAssignment_4() { return cInputOnlyAssignment_4; }

		//"!"
		public Keyword getInputOnlyExclamationMarkKeyword_4_0() { return cInputOnlyExclamationMarkKeyword_4_0; }
	}
	
	
	private final PointElements pPoint;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DotPointGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pPoint = new PointElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gef.dot.internal.language.DotPoint".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Point:
	//	x=DOUBLE "," y=DOUBLE ("," z=DOUBLE)? inputOnly?="!"?;
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}

	//terminal DOUBLE returns ecore::EDouble:
	//	"-"? ("." "0".."9"+ | "0".."9"+ ("." "0".."9"*)?);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 
}
