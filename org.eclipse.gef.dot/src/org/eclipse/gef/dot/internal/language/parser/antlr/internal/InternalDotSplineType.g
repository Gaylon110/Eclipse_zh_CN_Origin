/*
* generated by Xtext
*/
grammar InternalDotSplineType;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.gef.dot.internal.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gef.dot.internal.language.services.DotSplineTypeGrammarAccess;

}

@parser::members {

 	private DotSplineTypeGrammarAccess grammarAccess;
 	
    public InternalDotSplineTypeParser(TokenStream input, DotSplineTypeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SplineType";	
   	}
   	
   	@Override
   	protected DotSplineTypeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSplineType
entryRuleSplineType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSplineTypeRule()); }
	 iv_ruleSplineType=ruleSplineType 
	 { $current=$iv_ruleSplineType.current; } 
	 EOF 
;

// Rule SplineType
ruleSplineType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSplineTypeAccess().getSplinesSplineParserRuleCall_0_0()); 
	    }
		lv_splines_0_0=ruleSpline		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplineTypeRule());
	        }
       		add(
       			$current, 
       			"splines",
        		lv_splines_0_0, 
        		"Spline");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSplineTypeAccess().getSemicolonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSplineTypeAccess().getSplinesSplineParserRuleCall_1_1_0()); 
	    }
		lv_splines_2_0=ruleSpline		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplineTypeRule());
	        }
       		add(
       			$current, 
       			"splines",
        		lv_splines_2_0, 
        		"Spline");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSpline
entryRuleSpline returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSplineRule()); }
	 iv_ruleSpline=ruleSpline 
	 { $current=$iv_ruleSpline.current; } 
	 EOF 
;

// Rule Spline
ruleSpline returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='s' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSplineAccess().getSKeyword_0_0());
    }
	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSplineAccess().getCommaKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSplineAccess().getStartpPointParserRuleCall_0_2_0()); 
	    }
		lv_startp_2_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplineRule());
	        }
       		set(
       			$current, 
       			"startp",
        		lv_startp_2_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_3='e' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSplineAccess().getEKeyword_1_0());
    }
	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSplineAccess().getCommaKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSplineAccess().getEndpPointParserRuleCall_1_2_0()); 
	    }
		lv_endp_5_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplineRule());
	        }
       		set(
       			$current, 
       			"endp",
        		lv_endp_5_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_2_0()); 
	    }
		lv_controlPoints_6_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplineRule());
	        }
       		add(
       			$current, 
       			"controlPoints",
        		lv_controlPoints_6_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_3_0_0()); 
	    }
		lv_controlPoints_7_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplineRule());
	        }
       		add(
       			$current, 
       			"controlPoints",
        		lv_controlPoints_7_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_3_1_0()); 
	    }
		lv_controlPoints_8_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplineRule());
	        }
       		add(
       			$current, 
       			"controlPoints",
        		lv_controlPoints_8_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_3_2_0()); 
	    }
		lv_controlPoints_9_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplineRule());
	        }
       		add(
       			$current, 
       			"controlPoints",
        		lv_controlPoints_9_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	 iv_rulePoint=rulePoint 
	 { $current=$iv_rulePoint.current; } 
	 EOF 
;

// Rule Point
rulePoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_x_0_0=RULE_DOUBLE
		{
			newLeafNode(lv_x_0_0, grammarAccess.getPointAccess().getXDOUBLETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"x",
        		lv_x_0_0, 
        		"DOUBLE");
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPointAccess().getCommaKeyword_1());
    }
(
(
		lv_y_2_0=RULE_DOUBLE
		{
			newLeafNode(lv_y_2_0, grammarAccess.getPointAccess().getYDOUBLETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"y",
        		lv_y_2_0, 
        		"DOUBLE");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPointAccess().getCommaKeyword_3_0());
    }
(
(
		lv_z_4_0=RULE_DOUBLE
		{
			newLeafNode(lv_z_4_0, grammarAccess.getPointAccess().getZDOUBLETerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"z",
        		lv_z_4_0, 
        		"DOUBLE");
	    }

)
))?(
(
		lv_inputOnly_5_0=	'!' 
    {
        newLeafNode(lv_inputOnly_5_0, grammarAccess.getPointAccess().getInputOnlyExclamationMarkKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointRule());
	        }
       		setWithLastConsumed($current, "inputOnly", true, "!");
	    }

)
)?)
;





RULE_DOUBLE : '-'? ('.' ('0'..'9')+|('0'..'9')+ ('.' ('0'..'9')*)?);

RULE_WS : (' '|'\t'|'\r'|'\n')+;


