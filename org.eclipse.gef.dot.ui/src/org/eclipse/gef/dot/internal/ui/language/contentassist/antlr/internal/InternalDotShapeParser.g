/*
* generated by Xtext
*/
parser grammar InternalDotShapeParser;

options {
	tokenVocab=InternalDotShapeLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.gef.dot.internal.language.services.DotShapeGrammarAccess;

}

@members {
 
 	private DotShapeGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("Box", "'box'");
		tokenNameToValue.put("Cds", "'cds'");
		tokenNameToValue.put("Egg", "'egg'");
		tokenNameToValue.put("Tab", "'tab'");
		tokenNameToValue.put("Utr", "'utr'");
		tokenNameToValue.put("None", "'none'");
		tokenNameToValue.put("Note", "'note'");
		tokenNameToValue.put("Oval", "'oval'");
		tokenNameToValue.put("Rect", "'rect'");
		tokenNameToValue.put("Star", "'star'");
		tokenNameToValue.put("Box3d", "'box3d'");
		tokenNameToValue.put("House", "'house'");
		tokenNameToValue.put("Plain", "'plain'");
		tokenNameToValue.put("Point", "'point'");
		tokenNameToValue.put("Circle", "'circle'");
		tokenNameToValue.put("Folder", "'folder'");
		tokenNameToValue.put("Larrow", "'larrow'");
		tokenNameToValue.put("Rarrow", "'rarrow'");
		tokenNameToValue.put("Record", "'record'");
		tokenNameToValue.put("Square", "'square'");
		tokenNameToValue.put("Mcircle", "'Mcircle'");
		tokenNameToValue.put("Mrecord", "'Mrecord'");
		tokenNameToValue.put("Msquare", "'Msquare'");
		tokenNameToValue.put("Diamond", "'diamond'");
		tokenNameToValue.put("Ellipse", "'ellipse'");
		tokenNameToValue.put("Hexagon", "'hexagon'");
		tokenNameToValue.put("Octagon", "'octagon'");
		tokenNameToValue.put("Polygon", "'polygon'");
		tokenNameToValue.put("Rnastab", "'rnastab'");
		tokenNameToValue.put("Mdiamond", "'Mdiamond'");
		tokenNameToValue.put("Assembly", "'assembly'");
		tokenNameToValue.put("Cylinder", "'cylinder'");
		tokenNameToValue.put("Invhouse", "'invhouse'");
		tokenNameToValue.put("Pentagon", "'pentagon'");
		tokenNameToValue.put("Promoter", "'promoter'");
		tokenNameToValue.put("Ribosite", "'ribosite'");
		tokenNameToValue.put("Septagon", "'septagon'");
		tokenNameToValue.put("Triangle", "'triangle'");
		tokenNameToValue.put("Component", "'component'");
		tokenNameToValue.put("Insulator", "'insulator'");
		tokenNameToValue.put("Lpromoter", "'lpromoter'");
		tokenNameToValue.put("Noverhang", "'noverhang'");
		tokenNameToValue.put("Plaintext", "'plaintext'");
		tokenNameToValue.put("Rectangle", "'rectangle'");
		tokenNameToValue.put("Rpromoter", "'rpromoter'");
		tokenNameToValue.put("Signature", "'signature'");
		tokenNameToValue.put("Trapezium", "'trapezium'");
		tokenNameToValue.put("Underline", "'underline'");
		tokenNameToValue.put("Primersite", "'primersite'");
		tokenNameToValue.put("Terminator", "'terminator'");
		tokenNameToValue.put("Invtriangle", "'invtriangle'");
		tokenNameToValue.put("Proteinstab", "'proteinstab'");
		tokenNameToValue.put("Doublecircle", "'doublecircle'");
		tokenNameToValue.put("Invtrapezium", "'invtrapezium'");
		tokenNameToValue.put("Proteasesite", "'proteasesite'");
		tokenNameToValue.put("Doubleoctagon", "'doubleoctagon'");
		tokenNameToValue.put("Fivepoverhang", "'fivepoverhang'");
		tokenNameToValue.put("Parallelogram", "'parallelogram'");
		tokenNameToValue.put("Tripleoctagon", "'tripleoctagon'");
		tokenNameToValue.put("Threepoverhang", "'threepoverhang'");
		tokenNameToValue.put("Restrictionsite", "'restrictionsite'");
 	}
 	
    public void setGrammarAccess(DotShapeGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleShape
entryRuleShape 
:
{ before(grammarAccess.getShapeRule()); }
	 ruleShape
{ after(grammarAccess.getShapeRule()); } 
	 EOF 
;

// Rule Shape
ruleShape 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getShapeAccess().getShapeAssignment()); }
(rule__Shape__ShapeAssignment)
{ after(grammarAccess.getShapeAccess().getShapeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePolygonBasedShape
entryRulePolygonBasedShape 
:
{ before(grammarAccess.getPolygonBasedShapeRule()); }
	 rulePolygonBasedShape
{ after(grammarAccess.getPolygonBasedShapeRule()); } 
	 EOF 
;

// Rule PolygonBasedShape
rulePolygonBasedShape 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPolygonBasedShapeAccess().getShapeAssignment()); }
(rule__PolygonBasedShape__ShapeAssignment)
{ after(grammarAccess.getPolygonBasedShapeAccess().getShapeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordBasedShape
entryRuleRecordBasedShape 
:
{ before(grammarAccess.getRecordBasedShapeRule()); }
	 ruleRecordBasedShape
{ after(grammarAccess.getRecordBasedShapeRule()); } 
	 EOF 
;

// Rule RecordBasedShape
ruleRecordBasedShape 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRecordBasedShapeAccess().getShapeAssignment()); }
(rule__RecordBasedShape__ShapeAssignment)
{ after(grammarAccess.getRecordBasedShapeAccess().getShapeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule PolygonBasedNodeShape
rulePolygonBasedNodeShape
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getAlternatives()); }
(rule__PolygonBasedNodeShape__Alternatives)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RecordBasedNodeShape
ruleRecordBasedNodeShape
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordBasedNodeShapeAccess().getAlternatives()); }
(rule__RecordBasedNodeShape__Alternatives)
{ after(grammarAccess.getRecordBasedNodeShapeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Shape__ShapeAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShapeAccess().getShapePolygonBasedShapeParserRuleCall_0_0()); }
	rulePolygonBasedShape
{ after(grammarAccess.getShapeAccess().getShapePolygonBasedShapeParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getShapeAccess().getShapeRecordBasedShapeParserRuleCall_0_1()); }
	ruleRecordBasedShape
{ after(grammarAccess.getShapeAccess().getShapeRecordBasedShapeParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PolygonBasedNodeShape__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getBoxEnumLiteralDeclaration_0()); }
(	Box
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getBoxEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getPolygonEnumLiteralDeclaration_1()); }
(	Polygon
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getPolygonEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getEllipseEnumLiteralDeclaration_2()); }
(	Ellipse
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getEllipseEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getOvalEnumLiteralDeclaration_3()); }
(	Oval
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getOvalEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getCircleEnumLiteralDeclaration_4()); }
(	Circle
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getCircleEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getPointEnumLiteralDeclaration_5()); }
(	Point
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getPointEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getEggEnumLiteralDeclaration_6()); }
(	Egg
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getEggEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getTriangleEnumLiteralDeclaration_7()); }
(	Triangle
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getTriangleEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getPlaintextEnumLiteralDeclaration_8()); }
(	Plaintext
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getPlaintextEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getPlainEnumLiteralDeclaration_9()); }
(	Plain
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getPlainEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getDiamondEnumLiteralDeclaration_10()); }
(	Diamond
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getDiamondEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getTrapeziumEnumLiteralDeclaration_11()); }
(	Trapezium
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getTrapeziumEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getParallelogramEnumLiteralDeclaration_12()); }
(	Parallelogram
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getParallelogramEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getHouseEnumLiteralDeclaration_13()); }
(	House
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getHouseEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getPentagonEnumLiteralDeclaration_14()); }
(	Pentagon
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getPentagonEnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getHexagonEnumLiteralDeclaration_15()); }
(	Hexagon
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getHexagonEnumLiteralDeclaration_15()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getSeptagonEnumLiteralDeclaration_16()); }
(	Septagon
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getSeptagonEnumLiteralDeclaration_16()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getOctagonEnumLiteralDeclaration_17()); }
(	Octagon
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getOctagonEnumLiteralDeclaration_17()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getDoublecircleEnumLiteralDeclaration_18()); }
(	Doublecircle
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getDoublecircleEnumLiteralDeclaration_18()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getDoubleoctagonEnumLiteralDeclaration_19()); }
(	Doubleoctagon
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getDoubleoctagonEnumLiteralDeclaration_19()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getTripleoctagonEnumLiteralDeclaration_20()); }
(	Tripleoctagon
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getTripleoctagonEnumLiteralDeclaration_20()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getInvtriangleEnumLiteralDeclaration_21()); }
(	Invtriangle
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getInvtriangleEnumLiteralDeclaration_21()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getInvtrapeziumEnumLiteralDeclaration_22()); }
(	Invtrapezium
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getInvtrapeziumEnumLiteralDeclaration_22()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getInvhouseEnumLiteralDeclaration_23()); }
(	Invhouse
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getInvhouseEnumLiteralDeclaration_23()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getMdiamondEnumLiteralDeclaration_24()); }
(	Mdiamond
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getMdiamondEnumLiteralDeclaration_24()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getMsquareEnumLiteralDeclaration_25()); }
(	Msquare
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getMsquareEnumLiteralDeclaration_25()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getMcircleEnumLiteralDeclaration_26()); }
(	Mcircle
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getMcircleEnumLiteralDeclaration_26()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getRectEnumLiteralDeclaration_27()); }
(	Rect
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getRectEnumLiteralDeclaration_27()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getRectangleEnumLiteralDeclaration_28()); }
(	Rectangle
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getRectangleEnumLiteralDeclaration_28()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getSquareEnumLiteralDeclaration_29()); }
(	Square
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getSquareEnumLiteralDeclaration_29()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getStarEnumLiteralDeclaration_30()); }
(	Star
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getStarEnumLiteralDeclaration_30()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getNoneEnumLiteralDeclaration_31()); }
(	None
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getNoneEnumLiteralDeclaration_31()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getUnderlineEnumLiteralDeclaration_32()); }
(	Underline
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getUnderlineEnumLiteralDeclaration_32()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getCylinderEnumLiteralDeclaration_33()); }
(	Cylinder
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getCylinderEnumLiteralDeclaration_33()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getNoteEnumLiteralDeclaration_34()); }
(	Note
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getNoteEnumLiteralDeclaration_34()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getTabEnumLiteralDeclaration_35()); }
(	Tab
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getTabEnumLiteralDeclaration_35()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getFolderEnumLiteralDeclaration_36()); }
(	Folder
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getFolderEnumLiteralDeclaration_36()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getBox3dEnumLiteralDeclaration_37()); }
(	Box3d
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getBox3dEnumLiteralDeclaration_37()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getComponentEnumLiteralDeclaration_38()); }
(	Component
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getComponentEnumLiteralDeclaration_38()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getPromoterEnumLiteralDeclaration_39()); }
(	Promoter
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getPromoterEnumLiteralDeclaration_39()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getCdsEnumLiteralDeclaration_40()); }
(	Cds
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getCdsEnumLiteralDeclaration_40()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getTerminatorEnumLiteralDeclaration_41()); }
(	Terminator
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getTerminatorEnumLiteralDeclaration_41()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getUtrEnumLiteralDeclaration_42()); }
(	Utr
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getUtrEnumLiteralDeclaration_42()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getPrimersiteEnumLiteralDeclaration_43()); }
(	Primersite
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getPrimersiteEnumLiteralDeclaration_43()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getRestrictionsiteEnumLiteralDeclaration_44()); }
(	Restrictionsite
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getRestrictionsiteEnumLiteralDeclaration_44()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getFivepoverhangEnumLiteralDeclaration_45()); }
(	Fivepoverhang
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getFivepoverhangEnumLiteralDeclaration_45()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getThreepoverhangEnumLiteralDeclaration_46()); }
(	Threepoverhang
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getThreepoverhangEnumLiteralDeclaration_46()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getNoverhangEnumLiteralDeclaration_47()); }
(	Noverhang
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getNoverhangEnumLiteralDeclaration_47()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getAssemblyEnumLiteralDeclaration_48()); }
(	Assembly
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getAssemblyEnumLiteralDeclaration_48()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getSignatureEnumLiteralDeclaration_49()); }
(	Signature
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getSignatureEnumLiteralDeclaration_49()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getInsulatorEnumLiteralDeclaration_50()); }
(	Insulator
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getInsulatorEnumLiteralDeclaration_50()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getRibositeEnumLiteralDeclaration_51()); }
(	Ribosite
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getRibositeEnumLiteralDeclaration_51()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getRnastabEnumLiteralDeclaration_52()); }
(	Rnastab
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getRnastabEnumLiteralDeclaration_52()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getProteasesiteEnumLiteralDeclaration_53()); }
(	Proteasesite
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getProteasesiteEnumLiteralDeclaration_53()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getProteinstabEnumLiteralDeclaration_54()); }
(	Proteinstab
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getProteinstabEnumLiteralDeclaration_54()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getRpromoterEnumLiteralDeclaration_55()); }
(	Rpromoter
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getRpromoterEnumLiteralDeclaration_55()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getRarrowEnumLiteralDeclaration_56()); }
(	Rarrow
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getRarrowEnumLiteralDeclaration_56()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getLarrowEnumLiteralDeclaration_57()); }
(	Larrow
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getLarrowEnumLiteralDeclaration_57()); }
)

    |(
{ before(grammarAccess.getPolygonBasedNodeShapeAccess().getLpromoterEnumLiteralDeclaration_58()); }
(	Lpromoter
)
{ after(grammarAccess.getPolygonBasedNodeShapeAccess().getLpromoterEnumLiteralDeclaration_58()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordBasedNodeShape__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordBasedNodeShapeAccess().getRecordEnumLiteralDeclaration_0()); }
(	Record
)
{ after(grammarAccess.getRecordBasedNodeShapeAccess().getRecordEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRecordBasedNodeShapeAccess().getMrecordEnumLiteralDeclaration_1()); }
(	Mrecord
)
{ after(grammarAccess.getRecordBasedNodeShapeAccess().getMrecordEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Shape__ShapeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShapeAccess().getShapeAlternatives_0()); }
(rule__Shape__ShapeAlternatives_0)
{ after(grammarAccess.getShapeAccess().getShapeAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PolygonBasedShape__ShapeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPolygonBasedShapeAccess().getShapePolygonBasedNodeShapeEnumRuleCall_0()); }
	rulePolygonBasedNodeShape{ after(grammarAccess.getPolygonBasedShapeAccess().getShapePolygonBasedNodeShapeEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordBasedShape__ShapeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordBasedShapeAccess().getShapeRecordBasedNodeShapeEnumRuleCall_0()); }
	ruleRecordBasedNodeShape{ after(grammarAccess.getRecordBasedShapeAccess().getShapeRecordBasedNodeShapeEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


