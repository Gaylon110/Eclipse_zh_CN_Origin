/*
* generated by Xtext
*/
parser grammar InternalDotParser;

options {
	tokenVocab=InternalDotLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.gef.dot.internal.language.services.DotGrammarAccess;

}

@members {
 
 	private DotGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("HyphenMinusHyphenMinus", "'--'");
		tokenNameToValue.put("HyphenMinusGreaterThanSign", "'->'");
		tokenNameToValue.put("Edge", "'edge'");
		tokenNameToValue.put("Node", "'node'");
		tokenNameToValue.put("Graph", "'graph'");
		tokenNameToValue.put("Strict", "'strict'");
		tokenNameToValue.put("Digraph", "'digraph'");
		tokenNameToValue.put("Subgraph", "'subgraph'");
 	}
 	
    public void setGrammarAccess(DotGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleDotAst
entryRuleDotAst 
:
{ before(grammarAccess.getDotAstRule()); }
	 ruleDotAst
{ after(grammarAccess.getDotAstRule()); } 
	 EOF 
;

// Rule DotAst
ruleDotAst 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDotAstAccess().getGraphsAssignment()); }
(rule__DotAst__GraphsAssignment)*
{ after(grammarAccess.getDotAstAccess().getGraphsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDotGraph
entryRuleDotGraph 
:
{ before(grammarAccess.getDotGraphRule()); }
	 ruleDotGraph
{ after(grammarAccess.getDotGraphRule()); } 
	 EOF 
;

// Rule DotGraph
ruleDotGraph 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDotGraphAccess().getGroup()); }
(rule__DotGraph__Group__0)
{ after(grammarAccess.getDotGraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStmt
entryRuleStmt 
:
{ before(grammarAccess.getStmtRule()); }
	 ruleStmt
{ after(grammarAccess.getStmtRule()); } 
	 EOF 
;

// Rule Stmt
ruleStmt 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStmtAccess().getGroup()); }
(rule__Stmt__Group__0)
{ after(grammarAccess.getStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeStmtNode
entryRuleEdgeStmtNode 
:
{ before(grammarAccess.getEdgeStmtNodeRule()); }
	 ruleEdgeStmtNode
{ after(grammarAccess.getEdgeStmtNodeRule()); } 
	 EOF 
;

// Rule EdgeStmtNode
ruleEdgeStmtNode 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getGroup()); }
(rule__EdgeStmtNode__Group__0)
{ after(grammarAccess.getEdgeStmtNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleNodeStmt
entryRuleNodeStmt 
:
{ before(grammarAccess.getNodeStmtRule()); }
	 ruleNodeStmt
{ after(grammarAccess.getNodeStmtRule()); } 
	 EOF 
;

// Rule NodeStmt
ruleNodeStmt 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNodeStmtAccess().getGroup()); }
(rule__NodeStmt__Group__0)
{ after(grammarAccess.getNodeStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttrStmt
entryRuleAttrStmt 
:
{ before(grammarAccess.getAttrStmtRule()); }
	 ruleAttrStmt
{ after(grammarAccess.getAttrStmtRule()); } 
	 EOF 
;

// Rule AttrStmt
ruleAttrStmt 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttrStmtAccess().getGroup()); }
(rule__AttrStmt__Group__0)
{ after(grammarAccess.getAttrStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttrList
entryRuleAttrList 
:
{ before(grammarAccess.getAttrListRule()); }
	 ruleAttrList
{ after(grammarAccess.getAttrListRule()); } 
	 EOF 
;

// Rule AttrList
ruleAttrList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttrListAccess().getGroup()); }
(rule__AttrList__Group__0)
{ after(grammarAccess.getAttrListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubgraphOrEdgeStmtSubgraph
entryRuleSubgraphOrEdgeStmtSubgraph 
:
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphRule()); }
	 ruleSubgraphOrEdgeStmtSubgraph
{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphRule()); } 
	 EOF 
;

// Rule SubgraphOrEdgeStmtSubgraph
ruleSubgraphOrEdgeStmtSubgraph 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getGroup()); }
(rule__SubgraphOrEdgeStmtSubgraph__Group__0)
{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubgraph
entryRuleSubgraph 
:
{ before(grammarAccess.getSubgraphRule()); }
	 ruleSubgraph
{ after(grammarAccess.getSubgraphRule()); } 
	 EOF 
;

// Rule Subgraph
ruleSubgraph 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubgraphAccess().getGroup()); }
(rule__Subgraph__Group__0)
{ after(grammarAccess.getSubgraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePort
entryRulePort 
:
{ before(grammarAccess.getPortRule()); }
	 rulePort
{ after(grammarAccess.getPortRule()); } 
	 EOF 
;

// Rule Port
rulePort 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPortAccess().getAlternatives()); }
(rule__Port__Alternatives)
{ after(grammarAccess.getPortAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeRhs
entryRuleEdgeRhs 
:
{ before(grammarAccess.getEdgeRhsRule()); }
	 ruleEdgeRhs
{ after(grammarAccess.getEdgeRhsRule()); } 
	 EOF 
;

// Rule EdgeRhs
ruleEdgeRhs 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEdgeRhsAccess().getAlternatives()); }
(rule__EdgeRhs__Alternatives)
{ after(grammarAccess.getEdgeRhsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeRhsNode
entryRuleEdgeRhsNode 
:
{ before(grammarAccess.getEdgeRhsNodeRule()); }
	 ruleEdgeRhsNode
{ after(grammarAccess.getEdgeRhsNodeRule()); } 
	 EOF 
;

// Rule EdgeRhsNode
ruleEdgeRhsNode 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getGroup()); }
(rule__EdgeRhsNode__Group__0)
{ after(grammarAccess.getEdgeRhsNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeRhsSubgraph
entryRuleEdgeRhsSubgraph 
:
{ before(grammarAccess.getEdgeRhsSubgraphRule()); }
	 ruleEdgeRhsSubgraph
{ after(grammarAccess.getEdgeRhsSubgraphRule()); } 
	 EOF 
;

// Rule EdgeRhsSubgraph
ruleEdgeRhsSubgraph 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getGroup()); }
(rule__EdgeRhsSubgraph__Group__0)
{ after(grammarAccess.getEdgeRhsSubgraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeId
entryRuleNodeId 
:
{ before(grammarAccess.getNodeIdRule()); }
	 ruleNodeId
{ after(grammarAccess.getNodeIdRule()); } 
	 EOF 
;

// Rule NodeId
ruleNodeId 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNodeIdAccess().getGroup()); }
(rule__NodeId__Group__0)
{ after(grammarAccess.getNodeIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleID
entryRuleID 
:
{ before(grammarAccess.getIDRule()); }
	 ruleID
{ after(grammarAccess.getIDRule()); } 
	 EOF 
;

// Rule ID
ruleID 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIDAccess().getAlternatives()); }
(rule__ID__Alternatives)
{ after(grammarAccess.getIDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule EdgeOp
ruleEdgeOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeOpAccess().getAlternatives()); }
(rule__EdgeOp__Alternatives)
{ after(grammarAccess.getEdgeOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule GraphType
ruleGraphType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphTypeAccess().getAlternatives()); }
(rule__GraphType__Alternatives)
{ after(grammarAccess.getGraphTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AttributeType
ruleAttributeType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTypeAccess().getAlternatives()); }
(rule__AttributeType__Alternatives)
{ after(grammarAccess.getAttributeTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Stmt__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getNodeStmtParserRuleCall_0_0()); }
	ruleNodeStmt
{ after(grammarAccess.getStmtAccess().getNodeStmtParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getEdgeStmtNodeParserRuleCall_0_1()); }
	ruleEdgeStmtNode
{ after(grammarAccess.getStmtAccess().getEdgeStmtNodeParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getAttrStmtParserRuleCall_0_2()); }
	ruleAttrStmt
{ after(grammarAccess.getStmtAccess().getAttrStmtParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getAttributeParserRuleCall_0_3()); }
	ruleAttribute
{ after(grammarAccess.getStmtAccess().getAttributeParserRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getSubgraphOrEdgeStmtSubgraphParserRuleCall_0_4()); }
	ruleSubgraphOrEdgeStmtSubgraph
{ after(grammarAccess.getStmtAccess().getSubgraphOrEdgeStmtSubgraphParserRuleCall_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getCommaKeyword_2_1_0()); }

	Comma 

{ after(grammarAccess.getAttrListAccess().getCommaKeyword_2_1_0()); }
)

    |(
{ before(grammarAccess.getAttrListAccess().getSemicolonKeyword_2_1_1()); }

	Semicolon 

{ after(grammarAccess.getAttrListAccess().getSemicolonKeyword_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getGroup_0()); }
(rule__Port__Group_0__0)
{ after(grammarAccess.getPortAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPortAccess().getGroup_1()); }
(rule__Port__Group_1__0)
{ after(grammarAccess.getPortAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhs__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsAccess().getEdgeRhsNodeParserRuleCall_0()); }
	ruleEdgeRhsNode
{ after(grammarAccess.getEdgeRhsAccess().getEdgeRhsNodeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEdgeRhsAccess().getEdgeRhsSubgraphParserRuleCall_1()); }
	ruleEdgeRhsSubgraph
{ after(grammarAccess.getEdgeRhsAccess().getEdgeRhsSubgraphParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ID__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDAccess().getNUMERALTerminalRuleCall_0()); }
	RULE_NUMERAL
{ after(grammarAccess.getIDAccess().getNUMERALTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIDAccess().getCOMPASS_PTTerminalRuleCall_1()); }
	RULE_COMPASS_PT
{ after(grammarAccess.getIDAccess().getCOMPASS_PTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getIDAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getIDAccess().getSTRINGTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getIDAccess().getQUOTED_STRINGTerminalRuleCall_3()); }
	RULE_QUOTED_STRING
{ after(grammarAccess.getIDAccess().getQUOTED_STRINGTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getIDAccess().getHTML_STRINGTerminalRuleCall_4()); }
	RULE_HTML_STRING
{ after(grammarAccess.getIDAccess().getHTML_STRINGTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeOpAccess().getDirectedEnumLiteralDeclaration_0()); }
(	HyphenMinusGreaterThanSign
)
{ after(grammarAccess.getEdgeOpAccess().getDirectedEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEdgeOpAccess().getUndirectedEnumLiteralDeclaration_1()); }
(	HyphenMinusHyphenMinus
)
{ after(grammarAccess.getEdgeOpAccess().getUndirectedEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GraphType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphTypeAccess().getGraphEnumLiteralDeclaration_0()); }
(	Graph
)
{ after(grammarAccess.getGraphTypeAccess().getGraphEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getGraphTypeAccess().getDigraphEnumLiteralDeclaration_1()); }
(	Digraph
)
{ after(grammarAccess.getGraphTypeAccess().getDigraphEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTypeAccess().getGraphEnumLiteralDeclaration_0()); }
(	Graph
)
{ after(grammarAccess.getAttributeTypeAccess().getGraphEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getNodeEnumLiteralDeclaration_1()); }
(	Node
)
{ after(grammarAccess.getAttributeTypeAccess().getNodeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getEdgeEnumLiteralDeclaration_2()); }
(	Edge
)
{ after(grammarAccess.getAttributeTypeAccess().getEdgeEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DotGraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotGraph__Group__0__Impl
	rule__DotGraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getStrictAssignment_0()); }
(rule__DotGraph__StrictAssignment_0)?
{ after(grammarAccess.getDotGraphAccess().getStrictAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotGraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotGraph__Group__1__Impl
	rule__DotGraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getTypeAssignment_1()); }
(rule__DotGraph__TypeAssignment_1)
{ after(grammarAccess.getDotGraphAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotGraph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotGraph__Group__2__Impl
	rule__DotGraph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getNameAssignment_2()); }
(rule__DotGraph__NameAssignment_2)?
{ after(grammarAccess.getDotGraphAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotGraph__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotGraph__Group__3__Impl
	rule__DotGraph__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getLeftCurlyBracketKeyword_3()); }

	LeftCurlyBracket 

{ after(grammarAccess.getDotGraphAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotGraph__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotGraph__Group__4__Impl
	rule__DotGraph__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getStmtsAssignment_4()); }
(rule__DotGraph__StmtsAssignment_4)*
{ after(grammarAccess.getDotGraphAccess().getStmtsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotGraph__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotGraph__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getRightCurlyBracketKeyword_5()); }

	RightCurlyBracket 

{ after(grammarAccess.getDotGraphAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Stmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stmt__Group__0__Impl
	rule__Stmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getAlternatives_0()); }
(rule__Stmt__Alternatives_0)
{ after(grammarAccess.getStmtAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getSemicolonKeyword_1()); }
(
	Semicolon 
)?
{ after(grammarAccess.getStmtAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EdgeStmtNode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeStmtNode__Group__0__Impl
	rule__EdgeStmtNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getNodeAssignment_0()); }
(rule__EdgeStmtNode__NodeAssignment_0)
{ after(grammarAccess.getEdgeStmtNodeAccess().getNodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeStmtNode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeStmtNode__Group__1__Impl
	rule__EdgeStmtNode__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSAssignment_1()); }
(rule__EdgeStmtNode__EdgeRHSAssignment_1)
{ after(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSAssignment_1()); }
)
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSAssignment_1()); }
(rule__EdgeStmtNode__EdgeRHSAssignment_1)*
{ after(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeStmtNode__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeStmtNode__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getAttrListsAssignment_2()); }
(rule__EdgeStmtNode__AttrListsAssignment_2)*
{ after(grammarAccess.getEdgeStmtNodeAccess().getAttrListsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__NodeStmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeStmt__Group__0__Impl
	rule__NodeStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeStmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeStmtAccess().getNodeAssignment_0()); }
(rule__NodeStmt__NodeAssignment_0)
{ after(grammarAccess.getNodeStmtAccess().getNodeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeStmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeStmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeStmtAccess().getAttrListsAssignment_1()); }
(rule__NodeStmt__AttrListsAssignment_1)*
{ after(grammarAccess.getNodeStmtAccess().getAttrListsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttrStmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrStmt__Group__0__Impl
	rule__AttrStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrStmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrStmtAccess().getTypeAssignment_0()); }
(rule__AttrStmt__TypeAssignment_0)
{ after(grammarAccess.getAttrStmtAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttrStmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrStmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAttrStmtAccess().getAttrListsAssignment_1()); }
(rule__AttrStmt__AttrListsAssignment_1)
{ after(grammarAccess.getAttrStmtAccess().getAttrListsAssignment_1()); }
)
(
{ before(grammarAccess.getAttrStmtAccess().getAttrListsAssignment_1()); }
(rule__AttrStmt__AttrListsAssignment_1)*
{ after(grammarAccess.getAttrStmtAccess().getAttrListsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttrList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrList__Group__0__Impl
	rule__AttrList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getAttrListAction_0()); }
(

)
{ after(grammarAccess.getAttrListAccess().getAttrListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttrList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrList__Group__1__Impl
	rule__AttrList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getLeftSquareBracketKeyword_1()); }

	LeftSquareBracket 

{ after(grammarAccess.getAttrListAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttrList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrList__Group__2__Impl
	rule__AttrList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getGroup_2()); }
(rule__AttrList__Group_2__0)*
{ after(grammarAccess.getAttrListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttrList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getRightSquareBracketKeyword_3()); }

	RightSquareBracket 

{ after(grammarAccess.getAttrListAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AttrList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrList__Group_2__0__Impl
	rule__AttrList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getAttributesAssignment_2_0()); }
(rule__AttrList__AttributesAssignment_2_0)
{ after(grammarAccess.getAttrListAccess().getAttributesAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttrList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getAlternatives_2_1()); }
(rule__AttrList__Alternatives_2_1)?
{ after(grammarAccess.getAttrListAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
(rule__Attribute__NameAssignment_0)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }

	EqualsSign 

{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueAssignment_2()); }
(rule__Attribute__ValueAssignment_2)
{ after(grammarAccess.getAttributeAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubgraphOrEdgeStmtSubgraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubgraphOrEdgeStmtSubgraph__Group__0__Impl
	rule__SubgraphOrEdgeStmtSubgraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubgraphOrEdgeStmtSubgraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getSubgraphParserRuleCall_0()); }
	ruleSubgraph
{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getSubgraphParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubgraphOrEdgeStmtSubgraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubgraphOrEdgeStmtSubgraph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubgraphOrEdgeStmtSubgraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getGroup_1()); }
(rule__SubgraphOrEdgeStmtSubgraph__Group_1__0)?
{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubgraphOrEdgeStmtSubgraph__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubgraphOrEdgeStmtSubgraph__Group_1__0__Impl
	rule__SubgraphOrEdgeStmtSubgraph__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubgraphOrEdgeStmtSubgraph__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeStmtSubgraphSubgraphAction_1_0()); }
(

)
{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeStmtSubgraphSubgraphAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubgraphOrEdgeStmtSubgraph__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubgraphOrEdgeStmtSubgraph__Group_1__1__Impl
	rule__SubgraphOrEdgeStmtSubgraph__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubgraphOrEdgeStmtSubgraph__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeRHSAssignment_1_1()); }
(rule__SubgraphOrEdgeStmtSubgraph__EdgeRHSAssignment_1_1)
{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeRHSAssignment_1_1()); }
)
(
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeRHSAssignment_1_1()); }
(rule__SubgraphOrEdgeStmtSubgraph__EdgeRHSAssignment_1_1)*
{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeRHSAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubgraphOrEdgeStmtSubgraph__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubgraphOrEdgeStmtSubgraph__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubgraphOrEdgeStmtSubgraph__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getAttrListsAssignment_1_2()); }
(rule__SubgraphOrEdgeStmtSubgraph__AttrListsAssignment_1_2)*
{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getAttrListsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Subgraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__0__Impl
	rule__Subgraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getSubgraphAction_0()); }
(

)
{ after(grammarAccess.getSubgraphAccess().getSubgraphAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__1__Impl
	rule__Subgraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getGroup_1()); }
(rule__Subgraph__Group_1__0)?
{ after(grammarAccess.getSubgraphAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__2__Impl
	rule__Subgraph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getLeftCurlyBracketKeyword_2()); }

	LeftCurlyBracket 

{ after(grammarAccess.getSubgraphAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__3__Impl
	rule__Subgraph__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getStmtsAssignment_3()); }
(rule__Subgraph__StmtsAssignment_3)*
{ after(grammarAccess.getSubgraphAccess().getStmtsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getRightCurlyBracketKeyword_4()); }

	RightCurlyBracket 

{ after(grammarAccess.getSubgraphAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Subgraph__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group_1__0__Impl
	rule__Subgraph__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getSubgraphKeyword_1_0()); }

	Subgraph 

{ after(grammarAccess.getSubgraphAccess().getSubgraphKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getNameAssignment_1_1()); }
(rule__Subgraph__NameAssignment_1_1)?
{ after(grammarAccess.getSubgraphAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Port__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Port__Group_0__0__Impl
	rule__Port__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getColonKeyword_0_0()); }
(
	Colon 
)
{ after(grammarAccess.getPortAccess().getColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Port__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Port__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getCompass_ptAssignment_0_1()); }
(rule__Port__Compass_ptAssignment_0_1)
{ after(grammarAccess.getPortAccess().getCompass_ptAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Port__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Port__Group_1__0__Impl
	rule__Port__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getColonKeyword_1_0()); }

	Colon 

{ after(grammarAccess.getPortAccess().getColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Port__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Port__Group_1__1__Impl
	rule__Port__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getNameAssignment_1_1()); }
(rule__Port__NameAssignment_1_1)
{ after(grammarAccess.getPortAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Port__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Port__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getGroup_1_2()); }
(rule__Port__Group_1_2__0)?
{ after(grammarAccess.getPortAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Port__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Port__Group_1_2__0__Impl
	rule__Port__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getColonKeyword_1_2_0()); }

	Colon 

{ after(grammarAccess.getPortAccess().getColonKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Port__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Port__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getCompass_ptAssignment_1_2_1()); }
(rule__Port__Compass_ptAssignment_1_2_1)
{ after(grammarAccess.getPortAccess().getCompass_ptAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EdgeRhsNode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRhsNode__Group__0__Impl
	rule__EdgeRhsNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsNode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getOpAssignment_0()); }
(rule__EdgeRhsNode__OpAssignment_0)
{ after(grammarAccess.getEdgeRhsNodeAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeRhsNode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRhsNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsNode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getNodeAssignment_1()); }
(rule__EdgeRhsNode__NodeAssignment_1)
{ after(grammarAccess.getEdgeRhsNodeAccess().getNodeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EdgeRhsSubgraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRhsSubgraph__Group__0__Impl
	rule__EdgeRhsSubgraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsSubgraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getOpAssignment_0()); }
(rule__EdgeRhsSubgraph__OpAssignment_0)
{ after(grammarAccess.getEdgeRhsSubgraphAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeRhsSubgraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRhsSubgraph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsSubgraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphAssignment_1()); }
(rule__EdgeRhsSubgraph__SubgraphAssignment_1)
{ after(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeId__Group__0__Impl
	rule__NodeId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeIdAccess().getNameAssignment_0()); }
(rule__NodeId__NameAssignment_0)
{ after(grammarAccess.getNodeIdAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeIdAccess().getPortAssignment_1()); }
(rule__NodeId__PortAssignment_1)?
{ after(grammarAccess.getNodeIdAccess().getPortAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DotAst__GraphsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotAstAccess().getGraphsDotGraphParserRuleCall_0()); }
	ruleDotGraph{ after(grammarAccess.getDotAstAccess().getGraphsDotGraphParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__StrictAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getStrictStrictKeyword_0_0()); }
(
{ before(grammarAccess.getDotGraphAccess().getStrictStrictKeyword_0_0()); }

	Strict 

{ after(grammarAccess.getDotGraphAccess().getStrictStrictKeyword_0_0()); }
)

{ after(grammarAccess.getDotGraphAccess().getStrictStrictKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getTypeGraphTypeEnumRuleCall_1_0()); }
	ruleGraphType{ after(grammarAccess.getDotGraphAccess().getTypeGraphTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getNameIDParserRuleCall_2_0()); }
	ruleID{ after(grammarAccess.getDotGraphAccess().getNameIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DotGraph__StmtsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotGraphAccess().getStmtsStmtParserRuleCall_4_0()); }
	ruleStmt{ after(grammarAccess.getDotGraphAccess().getStmtsStmtParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__NodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getNodeNodeIdParserRuleCall_0_0()); }
	ruleNodeId{ after(grammarAccess.getEdgeStmtNodeAccess().getNodeNodeIdParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__EdgeRHSAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSEdgeRhsParserRuleCall_1_0()); }
	ruleEdgeRhs{ after(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSEdgeRhsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__AttrListsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getAttrListsAttrListParserRuleCall_2_0()); }
	ruleAttrList{ after(grammarAccess.getEdgeStmtNodeAccess().getAttrListsAttrListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__NodeStmt__NodeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeStmtAccess().getNodeNodeIdParserRuleCall_0_0()); }
	ruleNodeId{ after(grammarAccess.getNodeStmtAccess().getNodeNodeIdParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeStmt__AttrListsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeStmtAccess().getAttrListsAttrListParserRuleCall_1_0()); }
	ruleAttrList{ after(grammarAccess.getNodeStmtAccess().getAttrListsAttrListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttrStmt__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrStmtAccess().getTypeAttributeTypeEnumRuleCall_0_0()); }
	ruleAttributeType{ after(grammarAccess.getAttrStmtAccess().getTypeAttributeTypeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttrStmt__AttrListsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrStmtAccess().getAttrListsAttrListParserRuleCall_1_0()); }
	ruleAttrList{ after(grammarAccess.getAttrStmtAccess().getAttrListsAttrListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__AttributesAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getAttributesAttributeParserRuleCall_2_0_0()); }
	ruleAttribute{ after(grammarAccess.getAttrListAccess().getAttributesAttributeParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameIDParserRuleCall_0_0()); }
	ruleID{ after(grammarAccess.getAttributeAccess().getNameIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueIDParserRuleCall_2_0()); }
	ruleID{ after(grammarAccess.getAttributeAccess().getValueIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubgraphOrEdgeStmtSubgraph__EdgeRHSAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeRHSEdgeRhsParserRuleCall_1_1_0()); }
	ruleEdgeRhs{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getEdgeRHSEdgeRhsParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubgraphOrEdgeStmtSubgraph__AttrListsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getAttrListsAttrListParserRuleCall_1_2_0()); }
	ruleAttrList{ after(grammarAccess.getSubgraphOrEdgeStmtSubgraphAccess().getAttrListsAttrListParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getNameIDParserRuleCall_1_1_0()); }
	ruleID{ after(grammarAccess.getSubgraphAccess().getNameIDParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__StmtsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getStmtsStmtParserRuleCall_3_0()); }
	ruleStmt{ after(grammarAccess.getSubgraphAccess().getStmtsStmtParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Compass_ptAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getCompass_ptCOMPASS_PTTerminalRuleCall_0_1_0()); }
	RULE_COMPASS_PT{ after(grammarAccess.getPortAccess().getCompass_ptCOMPASS_PTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Port__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getNameIDParserRuleCall_1_1_0()); }
	ruleID{ after(grammarAccess.getPortAccess().getNameIDParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Port__Compass_ptAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortAccess().getCompass_ptCOMPASS_PTTerminalRuleCall_1_2_1_0()); }
	RULE_COMPASS_PT{ after(grammarAccess.getPortAccess().getCompass_ptCOMPASS_PTTerminalRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsNode__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getOpEdgeOpEnumRuleCall_0_0()); }
	ruleEdgeOp{ after(grammarAccess.getEdgeRhsNodeAccess().getOpEdgeOpEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsNode__NodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getNodeNodeIdParserRuleCall_1_0()); }
	ruleNodeId{ after(grammarAccess.getEdgeRhsNodeAccess().getNodeNodeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsSubgraph__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getOpEdgeOpEnumRuleCall_0_0()); }
	ruleEdgeOp{ after(grammarAccess.getEdgeRhsSubgraphAccess().getOpEdgeOpEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsSubgraph__SubgraphAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphSubgraphParserRuleCall_1_0()); }
	ruleSubgraph{ after(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphSubgraphParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeId__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeIdAccess().getNameIDParserRuleCall_0_0()); }
	ruleID{ after(grammarAccess.getNodeIdAccess().getNameIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeId__PortAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeIdAccess().getPortPortParserRuleCall_1_0()); }
	rulePort{ after(grammarAccess.getNodeIdAccess().getPortPortParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


