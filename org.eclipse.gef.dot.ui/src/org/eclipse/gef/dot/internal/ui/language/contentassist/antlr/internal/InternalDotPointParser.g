/*
* generated by Xtext
*/
parser grammar InternalDotPointParser;

options {
	tokenVocab=InternalDotPointLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.gef.dot.internal.language.services.DotPointGrammarAccess;

}

@members {
 
 	private DotPointGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("Comma", "','");
 	}
 	
    public void setGrammarAccess(DotPointGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRulePoint
entryRulePoint 
:
{ before(grammarAccess.getPointRule()); }
	 rulePoint
{ after(grammarAccess.getPointRule()); } 
	 EOF 
;

// Rule Point
rulePoint 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPointAccess().getGroup()); }
(rule__Point__Group__0)
{ after(grammarAccess.getPointAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Point__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__0__Impl
	rule__Point__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getXAssignment_0()); }
(rule__Point__XAssignment_0)
{ after(grammarAccess.getPointAccess().getXAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__1__Impl
	rule__Point__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getCommaKeyword_1()); }

	Comma 

{ after(grammarAccess.getPointAccess().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__2__Impl
	rule__Point__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getYAssignment_2()); }
(rule__Point__YAssignment_2)
{ after(grammarAccess.getPointAccess().getYAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__3__Impl
	rule__Point__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getGroup_3()); }
(rule__Point__Group_3__0)?
{ after(grammarAccess.getPointAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getInputOnlyAssignment_4()); }
(rule__Point__InputOnlyAssignment_4)?
{ after(grammarAccess.getPointAccess().getInputOnlyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Point__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group_3__0__Impl
	rule__Point__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getCommaKeyword_3_0()); }

	Comma 

{ after(grammarAccess.getPointAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getZAssignment_3_1()); }
(rule__Point__ZAssignment_3_1)
{ after(grammarAccess.getPointAccess().getZAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Point__XAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getXDOUBLETerminalRuleCall_0_0()); }
	RULE_DOUBLE{ after(grammarAccess.getPointAccess().getXDOUBLETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point__YAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getYDOUBLETerminalRuleCall_2_0()); }
	RULE_DOUBLE{ after(grammarAccess.getPointAccess().getYDOUBLETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point__ZAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getZDOUBLETerminalRuleCall_3_1_0()); }
	RULE_DOUBLE{ after(grammarAccess.getPointAccess().getZDOUBLETerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point__InputOnlyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getInputOnlyExclamationMarkKeyword_4_0()); }
(
{ before(grammarAccess.getPointAccess().getInputOnlyExclamationMarkKeyword_4_0()); }

	ExclamationMark 

{ after(grammarAccess.getPointAccess().getInputOnlyExclamationMarkKeyword_4_0()); }
)

{ after(grammarAccess.getPointAccess().getInputOnlyExclamationMarkKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


