/*
* generated by Xtext
*/
parser grammar InternalDotRectParser;

options {
	tokenVocab=InternalDotRectLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.gef.dot.internal.language.services.DotRectGrammarAccess;

}

@members {
 
 	private DotRectGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("Comma", "','");
 	}
 	
    public void setGrammarAccess(DotRectGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleRect
entryRuleRect 
:
{ before(grammarAccess.getRectRule()); }
	 ruleRect
{ after(grammarAccess.getRectRule()); } 
	 EOF 
;

// Rule Rect
ruleRect 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRectAccess().getGroup()); }
(rule__Rect__Group__0)
{ after(grammarAccess.getRectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Rect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rect__Group__0__Impl
	rule__Rect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getLlxAssignment_0()); }
(rule__Rect__LlxAssignment_0)
{ after(grammarAccess.getRectAccess().getLlxAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rect__Group__1__Impl
	rule__Rect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getCommaKeyword_1()); }

	Comma 

{ after(grammarAccess.getRectAccess().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rect__Group__2__Impl
	rule__Rect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getLlyAssignment_2()); }
(rule__Rect__LlyAssignment_2)
{ after(grammarAccess.getRectAccess().getLlyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rect__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rect__Group__3__Impl
	rule__Rect__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getCommaKeyword_3()); }

	Comma 

{ after(grammarAccess.getRectAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rect__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rect__Group__4__Impl
	rule__Rect__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getUrxAssignment_4()); }
(rule__Rect__UrxAssignment_4)
{ after(grammarAccess.getRectAccess().getUrxAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rect__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rect__Group__5__Impl
	rule__Rect__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getCommaKeyword_5()); }

	Comma 

{ after(grammarAccess.getRectAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rect__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rect__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getUryAssignment_6()); }
(rule__Rect__UryAssignment_6)
{ after(grammarAccess.getRectAccess().getUryAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

















rule__Rect__LlxAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getLlxDOUBLETerminalRuleCall_0_0()); }
	RULE_DOUBLE{ after(grammarAccess.getRectAccess().getLlxDOUBLETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__LlyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getLlyDOUBLETerminalRuleCall_2_0()); }
	RULE_DOUBLE{ after(grammarAccess.getRectAccess().getLlyDOUBLETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__UrxAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getUrxDOUBLETerminalRuleCall_4_0()); }
	RULE_DOUBLE{ after(grammarAccess.getRectAccess().getUrxDOUBLETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rect__UryAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRectAccess().getUryDOUBLETerminalRuleCall_6_0()); }
	RULE_DOUBLE{ after(grammarAccess.getRectAccess().getUryDOUBLETerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


