/*
* generated by Xtext
*/
parser grammar InternalDotSplineTypeParser;

options {
	tokenVocab=InternalDotSplineTypeLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.gef.dot.internal.language.services.DotSplineTypeGrammarAccess;

}

@members {
 
 	private DotSplineTypeGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("E", "'e'");
		tokenNameToValue.put("S", "'s'");
 	}
 	
    public void setGrammarAccess(DotSplineTypeGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleSplineType
entryRuleSplineType 
:
{ before(grammarAccess.getSplineTypeRule()); }
	 ruleSplineType
{ after(grammarAccess.getSplineTypeRule()); } 
	 EOF 
;

// Rule SplineType
ruleSplineType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSplineTypeAccess().getGroup()); }
(rule__SplineType__Group__0)
{ after(grammarAccess.getSplineTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpline
entryRuleSpline 
:
{ before(grammarAccess.getSplineRule()); }
	 ruleSpline
{ after(grammarAccess.getSplineRule()); } 
	 EOF 
;

// Rule Spline
ruleSpline 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSplineAccess().getGroup()); }
(rule__Spline__Group__0)
{ after(grammarAccess.getSplineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePoint
entryRulePoint 
:
{ before(grammarAccess.getPointRule()); }
	 rulePoint
{ after(grammarAccess.getPointRule()); } 
	 EOF 
;

// Rule Point
rulePoint 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPointAccess().getGroup()); }
(rule__Point__Group__0)
{ after(grammarAccess.getPointAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SplineType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplineType__Group__0__Impl
	rule__SplineType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SplineType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineTypeAccess().getSplinesAssignment_0()); }
(rule__SplineType__SplinesAssignment_0)
{ after(grammarAccess.getSplineTypeAccess().getSplinesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplineType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplineType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SplineType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineTypeAccess().getGroup_1()); }
(rule__SplineType__Group_1__0)*
{ after(grammarAccess.getSplineTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SplineType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplineType__Group_1__0__Impl
	rule__SplineType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SplineType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineTypeAccess().getSemicolonKeyword_1_0()); }

	Semicolon 

{ after(grammarAccess.getSplineTypeAccess().getSemicolonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SplineType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SplineType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SplineType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineTypeAccess().getSplinesAssignment_1_1()); }
(rule__SplineType__SplinesAssignment_1_1)
{ after(grammarAccess.getSplineTypeAccess().getSplinesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Spline__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group__0__Impl
	rule__Spline__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getGroup_0()); }
(rule__Spline__Group_0__0)?
{ after(grammarAccess.getSplineAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spline__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group__1__Impl
	rule__Spline__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getGroup_1()); }
(rule__Spline__Group_1__0)?
{ after(grammarAccess.getSplineAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spline__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group__2__Impl
	rule__Spline__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getControlPointsAssignment_2()); }
(rule__Spline__ControlPointsAssignment_2)
{ after(grammarAccess.getSplineAccess().getControlPointsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spline__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSplineAccess().getGroup_3()); }
(rule__Spline__Group_3__0)
{ after(grammarAccess.getSplineAccess().getGroup_3()); }
)
(
{ before(grammarAccess.getSplineAccess().getGroup_3()); }
(rule__Spline__Group_3__0)*
{ after(grammarAccess.getSplineAccess().getGroup_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Spline__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group_0__0__Impl
	rule__Spline__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getSKeyword_0_0()); }

	S 

{ after(grammarAccess.getSplineAccess().getSKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spline__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group_0__1__Impl
	rule__Spline__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getCommaKeyword_0_1()); }

	Comma 

{ after(grammarAccess.getSplineAccess().getCommaKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spline__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getStartpAssignment_0_2()); }
(rule__Spline__StartpAssignment_0_2)
{ after(grammarAccess.getSplineAccess().getStartpAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Spline__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group_1__0__Impl
	rule__Spline__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getEKeyword_1_0()); }

	E 

{ after(grammarAccess.getSplineAccess().getEKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spline__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group_1__1__Impl
	rule__Spline__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getCommaKeyword_1_1()); }

	Comma 

{ after(grammarAccess.getSplineAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spline__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getEndpAssignment_1_2()); }
(rule__Spline__EndpAssignment_1_2)
{ after(grammarAccess.getSplineAccess().getEndpAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Spline__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group_3__0__Impl
	rule__Spline__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getControlPointsAssignment_3_0()); }
(rule__Spline__ControlPointsAssignment_3_0)
{ after(grammarAccess.getSplineAccess().getControlPointsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spline__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group_3__1__Impl
	rule__Spline__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getControlPointsAssignment_3_1()); }
(rule__Spline__ControlPointsAssignment_3_1)
{ after(grammarAccess.getSplineAccess().getControlPointsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spline__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spline__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getControlPointsAssignment_3_2()); }
(rule__Spline__ControlPointsAssignment_3_2)
{ after(grammarAccess.getSplineAccess().getControlPointsAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Point__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__0__Impl
	rule__Point__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getXAssignment_0()); }
(rule__Point__XAssignment_0)
{ after(grammarAccess.getPointAccess().getXAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__1__Impl
	rule__Point__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getCommaKeyword_1()); }

	Comma 

{ after(grammarAccess.getPointAccess().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__2__Impl
	rule__Point__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getYAssignment_2()); }
(rule__Point__YAssignment_2)
{ after(grammarAccess.getPointAccess().getYAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__3__Impl
	rule__Point__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getGroup_3()); }
(rule__Point__Group_3__0)?
{ after(grammarAccess.getPointAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getInputOnlyAssignment_4()); }
(rule__Point__InputOnlyAssignment_4)?
{ after(grammarAccess.getPointAccess().getInputOnlyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Point__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group_3__0__Impl
	rule__Point__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getCommaKeyword_3_0()); }

	Comma 

{ after(grammarAccess.getPointAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getZAssignment_3_1()); }
(rule__Point__ZAssignment_3_1)
{ after(grammarAccess.getPointAccess().getZAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__SplineType__SplinesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineTypeAccess().getSplinesSplineParserRuleCall_0_0()); }
	ruleSpline{ after(grammarAccess.getSplineTypeAccess().getSplinesSplineParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SplineType__SplinesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineTypeAccess().getSplinesSplineParserRuleCall_1_1_0()); }
	ruleSpline{ after(grammarAccess.getSplineTypeAccess().getSplinesSplineParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__StartpAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getStartpPointParserRuleCall_0_2_0()); }
	rulePoint{ after(grammarAccess.getSplineAccess().getStartpPointParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__EndpAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getEndpPointParserRuleCall_1_2_0()); }
	rulePoint{ after(grammarAccess.getSplineAccess().getEndpPointParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__ControlPointsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_2_0()); }
	rulePoint{ after(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__ControlPointsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_3_0_0()); }
	rulePoint{ after(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__ControlPointsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_3_1_0()); }
	rulePoint{ after(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spline__ControlPointsAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_3_2_0()); }
	rulePoint{ after(grammarAccess.getSplineAccess().getControlPointsPointParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point__XAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getXDOUBLETerminalRuleCall_0_0()); }
	RULE_DOUBLE{ after(grammarAccess.getPointAccess().getXDOUBLETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point__YAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getYDOUBLETerminalRuleCall_2_0()); }
	RULE_DOUBLE{ after(grammarAccess.getPointAccess().getYDOUBLETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point__ZAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getZDOUBLETerminalRuleCall_3_1_0()); }
	RULE_DOUBLE{ after(grammarAccess.getPointAccess().getZDOUBLETerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point__InputOnlyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getInputOnlyExclamationMarkKeyword_4_0()); }
(
{ before(grammarAccess.getPointAccess().getInputOnlyExclamationMarkKeyword_4_0()); }

	ExclamationMark 

{ after(grammarAccess.getPointAccess().getInputOnlyExclamationMarkKeyword_4_0()); }
)

{ after(grammarAccess.getPointAccess().getInputOnlyExclamationMarkKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


