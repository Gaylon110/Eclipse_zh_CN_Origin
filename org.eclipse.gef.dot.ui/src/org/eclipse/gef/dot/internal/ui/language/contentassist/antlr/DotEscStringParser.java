/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.gef.dot.internal.language.services.DotEscStringGrammarAccess;

public class DotEscStringParser extends AbstractContentAssistParser {
	
	@Inject
	private DotEscStringGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotEscStringParser createParser() {
		org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotEscStringParser result = new org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotEscStringParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getJustifiedTextAccess().getAlternatives(), "rule__JustifiedText__Alternatives");
					put(grammarAccess.getJustificationAccess().getAlternatives(), "rule__Justification__Alternatives");
					put(grammarAccess.getEscStringAccess().getGroup(), "rule__EscString__Group__0");
					put(grammarAccess.getJustifiedTextAccess().getGroup_0(), "rule__JustifiedText__Group_0__0");
					put(grammarAccess.getTEXTAccess().getGroup(), "rule__TEXT__Group__0");
					put(grammarAccess.getEscStringAccess().getLinesAssignment_1(), "rule__EscString__LinesAssignment_1");
					put(grammarAccess.getJustifiedTextAccess().getTextAssignment_0_0(), "rule__JustifiedText__TextAssignment_0_0");
					put(grammarAccess.getJustifiedTextAccess().getJustificationAssignment_0_1(), "rule__JustifiedText__JustificationAssignment_0_1");
					put(grammarAccess.getJustifiedTextAccess().getJustificationAssignment_1(), "rule__JustifiedText__JustificationAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotEscStringParser typedParser = (org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotEscStringParser) parser;
			typedParser.entryRuleEscString();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public DotEscStringGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DotEscStringGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
