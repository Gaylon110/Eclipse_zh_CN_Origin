/*
* generated by Xtext
*/
parser grammar InternalDotEscStringParser;

options {
	tokenVocab=InternalDotEscStringLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.gef.dot.internal.language.services.DotEscStringGrammarAccess;

}

@members {
 
 	private DotEscStringGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("L", "'\\l'");
		tokenNameToValue.put("N", "'\\n'");
		tokenNameToValue.put("R", "'\\r'");
 	}
 	
    public void setGrammarAccess(DotEscStringGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleEscString
entryRuleEscString 
:
{ before(grammarAccess.getEscStringRule()); }
	 ruleEscString
{ after(grammarAccess.getEscStringRule()); } 
	 EOF 
;

// Rule EscString
ruleEscString 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEscStringAccess().getGroup()); }
(rule__EscString__Group__0)
{ after(grammarAccess.getEscStringAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJustifiedText
entryRuleJustifiedText 
:
{ before(grammarAccess.getJustifiedTextRule()); }
	 ruleJustifiedText
{ after(grammarAccess.getJustifiedTextRule()); } 
	 EOF 
;

// Rule JustifiedText
ruleJustifiedText 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getJustifiedTextAccess().getAlternatives()); }
(rule__JustifiedText__Alternatives)
{ after(grammarAccess.getJustifiedTextAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTEXT
entryRuleTEXT 
:
{ before(grammarAccess.getTEXTRule()); }
	 ruleTEXT
{ after(grammarAccess.getTEXTRule()); } 
	 EOF 
;

// Rule TEXT
ruleTEXT 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTEXTAccess().getGroup()); }
(rule__TEXT__Group__0)
{ after(grammarAccess.getTEXTAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Justification
ruleJustification
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getAlternatives()); }
(rule__Justification__Alternatives)
{ after(grammarAccess.getJustificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__JustifiedText__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustifiedTextAccess().getGroup_0()); }
(rule__JustifiedText__Group_0__0)
{ after(grammarAccess.getJustifiedTextAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getJustifiedTextAccess().getJustificationAssignment_1()); }
(rule__JustifiedText__JustificationAssignment_1)
{ after(grammarAccess.getJustifiedTextAccess().getJustificationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Justification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getCENTEREDEnumLiteralDeclaration_0()); }
(	N
)
{ after(grammarAccess.getJustificationAccess().getCENTEREDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getJustificationAccess().getLEFTEnumLiteralDeclaration_1()); }
(	L
)
{ after(grammarAccess.getJustificationAccess().getLEFTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getJustificationAccess().getRIGHTEnumLiteralDeclaration_2()); }
(	R
)
{ after(grammarAccess.getJustificationAccess().getRIGHTEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__EscString__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EscString__Group__0__Impl
	rule__EscString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EscString__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEscStringAccess().getEscStringAction_0()); }
(

)
{ after(grammarAccess.getEscStringAccess().getEscStringAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EscString__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EscString__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EscString__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEscStringAccess().getLinesAssignment_1()); }
(rule__EscString__LinesAssignment_1)*
{ after(grammarAccess.getEscStringAccess().getLinesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JustifiedText__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JustifiedText__Group_0__0__Impl
	rule__JustifiedText__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JustifiedText__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustifiedTextAccess().getTextAssignment_0_0()); }
(rule__JustifiedText__TextAssignment_0_0)
{ after(grammarAccess.getJustifiedTextAccess().getTextAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JustifiedText__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JustifiedText__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JustifiedText__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustifiedTextAccess().getJustificationAssignment_0_1()); }
(rule__JustifiedText__JustificationAssignment_0_1)?
{ after(grammarAccess.getJustifiedTextAccess().getJustificationAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TEXT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TEXT__Group__0__Impl
	rule__TEXT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TEXT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTEXTAccess().getCHARTerminalRuleCall_0()); }
	RULE_CHAR
{ after(grammarAccess.getTEXTAccess().getCHARTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TEXT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TEXT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TEXT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTEXTAccess().getCHARTerminalRuleCall_1()); }
(	RULE_CHAR)*
{ after(grammarAccess.getTEXTAccess().getCHARTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__EscString__LinesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEscStringAccess().getLinesJustifiedTextParserRuleCall_1_0()); }
	ruleJustifiedText{ after(grammarAccess.getEscStringAccess().getLinesJustifiedTextParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JustifiedText__TextAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustifiedTextAccess().getTextTEXTParserRuleCall_0_0_0()); }
	ruleTEXT{ after(grammarAccess.getJustifiedTextAccess().getTextTEXTParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JustifiedText__JustificationAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustifiedTextAccess().getJustificationJustificationEnumRuleCall_0_1_0()); }
	ruleJustification{ after(grammarAccess.getJustifiedTextAccess().getJustificationJustificationEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JustifiedText__JustificationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustifiedTextAccess().getJustificationJustificationEnumRuleCall_1_0()); }
	ruleJustification{ after(grammarAccess.getJustifiedTextAccess().getJustificationJustificationEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


