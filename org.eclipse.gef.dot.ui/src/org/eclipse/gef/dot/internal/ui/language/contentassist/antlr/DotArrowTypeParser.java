/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.gef.dot.internal.language.services.DotArrowTypeGrammarAccess;

public class DotArrowTypeParser extends AbstractContentAssistParser {
	
	@Inject
	private DotArrowTypeGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotArrowTypeParser createParser() {
		org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotArrowTypeParser result = new org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotArrowTypeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractArrowShapeAccess().getAlternatives(), "rule__AbstractArrowShape__Alternatives");
					put(grammarAccess.getArrowShapeAccess().getSideAlternatives_1_0(), "rule__ArrowShape__SideAlternatives_1_0");
					put(grammarAccess.getDeprecatedShapeAccess().getAlternatives(), "rule__DeprecatedShape__Alternatives");
					put(grammarAccess.getPrimitiveShapeAccess().getAlternatives(), "rule__PrimitiveShape__Alternatives");
					put(grammarAccess.getArrowTypeAccess().getGroup(), "rule__ArrowType__Group__0");
					put(grammarAccess.getArrowTypeAccess().getGroup_1(), "rule__ArrowType__Group_1__0");
					put(grammarAccess.getArrowTypeAccess().getGroup_1_1(), "rule__ArrowType__Group_1_1__0");
					put(grammarAccess.getArrowShapeAccess().getGroup(), "rule__ArrowShape__Group__0");
					put(grammarAccess.getArrowTypeAccess().getArrowShapesAssignment_0(), "rule__ArrowType__ArrowShapesAssignment_0");
					put(grammarAccess.getArrowTypeAccess().getArrowShapesAssignment_1_0(), "rule__ArrowType__ArrowShapesAssignment_1_0");
					put(grammarAccess.getArrowTypeAccess().getArrowShapesAssignment_1_1_0(), "rule__ArrowType__ArrowShapesAssignment_1_1_0");
					put(grammarAccess.getArrowTypeAccess().getArrowShapesAssignment_1_1_1(), "rule__ArrowType__ArrowShapesAssignment_1_1_1");
					put(grammarAccess.getArrowShapeAccess().getOpenAssignment_0(), "rule__ArrowShape__OpenAssignment_0");
					put(grammarAccess.getArrowShapeAccess().getSideAssignment_1(), "rule__ArrowShape__SideAssignment_1");
					put(grammarAccess.getArrowShapeAccess().getShapeAssignment_2(), "rule__ArrowShape__ShapeAssignment_2");
					put(grammarAccess.getDeprecatedArrowShapeAccess().getShapeAssignment(), "rule__DeprecatedArrowShape__ShapeAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotArrowTypeParser typedParser = (org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotArrowTypeParser) parser;
			typedParser.entryRuleArrowType();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public DotArrowTypeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DotArrowTypeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
