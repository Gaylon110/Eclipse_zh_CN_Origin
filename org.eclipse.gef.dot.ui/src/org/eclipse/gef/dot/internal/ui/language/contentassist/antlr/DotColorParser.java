/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.gef.dot.internal.language.services.DotColorGrammarAccess;

public class DotColorParser extends AbstractContentAssistParser {
	
	@Inject
	private DotColorGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotColorParser createParser() {
		org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotColorParser result = new org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotColorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
					put(grammarAccess.getStringColorAccess().getNameAlternatives_1_0(), "rule__StringColor__NameAlternatives_1_0");
					put(grammarAccess.getRGBColorAccess().getGroup(), "rule__RGBColor__Group__0");
					put(grammarAccess.getHSVColorAccess().getGroup(), "rule__HSVColor__Group__0");
					put(grammarAccess.getStringColorAccess().getGroup(), "rule__StringColor__Group__0");
					put(grammarAccess.getStringColorAccess().getGroup_0(), "rule__StringColor__Group_0__0");
					put(grammarAccess.getHexAccess().getGroup(), "rule__Hex__Group__0");
					put(grammarAccess.getRGBColorAccess().getRAssignment_1(), "rule__RGBColor__RAssignment_1");
					put(grammarAccess.getRGBColorAccess().getGAssignment_2(), "rule__RGBColor__GAssignment_2");
					put(grammarAccess.getRGBColorAccess().getBAssignment_3(), "rule__RGBColor__BAssignment_3");
					put(grammarAccess.getRGBColorAccess().getAAssignment_4(), "rule__RGBColor__AAssignment_4");
					put(grammarAccess.getHSVColorAccess().getHAssignment_0(), "rule__HSVColor__HAssignment_0");
					put(grammarAccess.getHSVColorAccess().getSAssignment_2(), "rule__HSVColor__SAssignment_2");
					put(grammarAccess.getHSVColorAccess().getVAssignment_4(), "rule__HSVColor__VAssignment_4");
					put(grammarAccess.getStringColorAccess().getSchemeAssignment_0_1(), "rule__StringColor__SchemeAssignment_0_1");
					put(grammarAccess.getStringColorAccess().getNameAssignment_1(), "rule__StringColor__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotColorParser typedParser = (org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotColorParser) parser;
			typedParser.entryRuleColor();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public DotColorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DotColorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
