/*
* generated by Xtext
*/
package org.eclipse.gef.dot.internal.ui.language.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.gef.dot.internal.language.services.DotHtmlLabelGrammarAccess;

public class DotHtmlLabelParser extends AbstractContentAssistParser {
	
	@Inject
	private DotHtmlLabelGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotHtmlLabelParser createParser() {
		org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotHtmlLabelParser result = new org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotHtmlLabelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getHtmlContentAccess().getAlternatives(), "rule__HtmlContent__Alternatives");
					put(grammarAccess.getHtmlTagAccess().getAlternatives_3(), "rule__HtmlTag__Alternatives_3");
					put(grammarAccess.getHtmlTagAccess().getGroup(), "rule__HtmlTag__Group__0");
					put(grammarAccess.getHtmlTagAccess().getGroup_3_1(), "rule__HtmlTag__Group_3_1__0");
					put(grammarAccess.getHtmlAttrAccess().getGroup(), "rule__HtmlAttr__Group__0");
					put(grammarAccess.getHtmlLabelAccess().getPartsAssignment(), "rule__HtmlLabel__PartsAssignment");
					put(grammarAccess.getHtmlContentAccess().getTagAssignment_0(), "rule__HtmlContent__TagAssignment_0");
					put(grammarAccess.getHtmlContentAccess().getTextAssignment_1(), "rule__HtmlContent__TextAssignment_1");
					put(grammarAccess.getHtmlTagAccess().getNameAssignment_1(), "rule__HtmlTag__NameAssignment_1");
					put(grammarAccess.getHtmlTagAccess().getAttributesAssignment_2(), "rule__HtmlTag__AttributesAssignment_2");
					put(grammarAccess.getHtmlTagAccess().getSelfClosingAssignment_3_0(), "rule__HtmlTag__SelfClosingAssignment_3_0");
					put(grammarAccess.getHtmlTagAccess().getChildrenAssignment_3_1_1(), "rule__HtmlTag__ChildrenAssignment_3_1_1");
					put(grammarAccess.getHtmlTagAccess().getCloseNameAssignment_3_1_3(), "rule__HtmlTag__CloseNameAssignment_3_1_3");
					put(grammarAccess.getHtmlAttrAccess().getNameAssignment_0(), "rule__HtmlAttr__NameAssignment_0");
					put(grammarAccess.getHtmlAttrAccess().getValueAssignment_4(), "rule__HtmlAttr__ValueAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotHtmlLabelParser typedParser = (org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.internal.InternalDotHtmlLabelParser) parser;
			typedParser.entryRuleHtmlLabel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_HTML_COMMENT" };
	}
	
	public DotHtmlLabelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DotHtmlLabelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
